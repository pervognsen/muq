Wed Dec 29 09:39:14 1999  Cynbe ru Taren  <cynbe@muq.org>

	* muq.t: Added properties
	    .muq.creationDate
	    .muq.runtimeInPreviousSessions
	    .muq.serverRestarts
	    .muq.sessionStartDate
	to track server uptime.  These are automatically
	updated as appropriate by the server.
	
Tue Dec 28 18:46:28 1999  Cynbe ru Taren  <cynbe@muq.org>

	* cfn.t: Marked all compiled-function objects as
	being read-only (vm_Set_Constbit()).

	* stg.t: Marked all strings except those created via
	i08_Alloc() as being read-only (vm_Set_Constbit()).
	There is no enforcement based on this flag yet, but
	with the bit in place, adding enforcement by and by
	will be much easier.

Mon Dec 27 14:10:39 1999  Cynbe ru Taren  <cynbe@muq.org>

	* vm.t: Removed old special-case optimization merging
	all zero-length objects into one immediate value. Doing
	this clears the way to variable-length vm.t objects,
	since zero-length objects must have separate identities
	if they are to be independently resizable.

Mon Dec 27 11:48:07 1999  Cynbe ru Taren  <cynbe@muq.org>

	* vm.t: dbId added to header of .db / .muq files.  This
	will allow future releases to use arbitrary filenames
	for .db and .muq files, in particular filenames which
	do not encode the dbId, 

Tue Dec  7 22:23:22 1999  Cynbe ru Taren  <cynbe@muq.org>

	* Muq -1.48.0 release.

Tue Dec  7 14:01:59 1999  Cynbe ru Taren  <cynbe@muq.org>

	* vm.t: Auto-byteswapped muq-CURRENT-ROOTDB.muq file
	comes up and runs for first time! :)
	Import and export of .db files also seems to be working.
	Also added a --dump commandline option.
	
Sun Nov 28 14:52:04 1999  Cynbe ru Taren  <cynbe@muq.org>

	* dbf.t: Hidden propdir on dbf objects now lists everything
	in that db, so (for example)
	    .db["MUF"] lsh
	will list everything in the MUF db.  Doing this for all
	dbs will list everything in the server.

Mon Nov 22 02:43:27 1999  Cynbe ru Taren  <cynbe@muq.org>

	* Multiple per-db files folded into one master db file.
	With remarkably little pain! :)

Sun Nov 21 11:02:46 1999  Cynbe ru Taren  <cynbe@muq.org>

	* vm.h: Patched to use "%qx" instead of "%llx" 
	on FreeBSD in response to a report that Muq 
	was coredumping on FreeBSD 2.2.7 and feedback
	from freebsd-bugs@freebsd.org indicating that
	%llx was not supported prior to FreeBSD 3.2,
	but that "%qx" is an ancient non-standard
	BSD alternative.

Thu Nov 18 10:16:21 1999  Cynbe ru Taren  <cynbe@muq.org>

	* Muq v -1.46.0 release: vm.t goes from 64K to 256 byte units.

Sat Oct 16 03:53:33 1999  Cynbe ru Taren  <cynbe@muq.org>

	* sil.t: Fixed a bug in the btree nextInLeaf
 	functions:  They had been scanning for a key equal
	to the given one and then returning the next one,
	which fails if the given key is absent from the
	tree.
  	  This bug was resulting in very erratic operation
 	when an object had both hardwired and btree-stored
	properties in the same propdir.
	  There were also cases where obj_Neql() wasn't being
	used -- direct key comparisons were being done as a
	minor speed hack, which produced incorrect results.

	* pkg.t: Scott Crosby reported a weird bug where
	.lib["muf"] listed as empty even though there were
	several thousand symbols defined in it and they were
	working fine!
	  Turned out to be due to this summer's propdir
	re-organization where many slots became implicit:
	The compilers and related logic were using the
	implicit slots, but 'ls' was winding up using the
	explicit slots.
	  Fixed that, and changed package symbols from
	hashed to sorted while I was at it:  Slightly
	slower but users will prefer the sorted listing.

Fri Oct 15 00:26:49 1999  Cynbe ru Taren  <cynbe@muq.org>

	* obj.t: obj_neql() was comparing int vs float via
	    return (Vm_Int)(OBJ_TO_FLOAT(a) - (float)i);
	which simply doesn't work -- it thinks 0.5 == 0 which
	does bad things to sorts and such.  This must be an
	ancient bug.  :(

Wed Oct 13 01:18:48 1999  Cynbe ru Taren  <cynbe@muq.org>

	* MUC draws its first OpenGL teapot.

Mon Oct 11 01:44:00 1999  Cynbe ru Taren  <cynbe@muq.org>

	* MUC (Multi-User C) file compiler first functionality.

Sun Oct 10 15:58:28 1999  Cynbe ru Taren  <cynbe@muq.org>

	* MUC (Multi-User C) shell first functionality! :)

Tue Oct  5 16:47:43 1999  Cynbe ru Taren  <cynbe@muq.org>

	* jobbuild.t: Added some fns from Texturing and Modelling:
	A Procedural Approach, one of my favorite graphics books.
	    bias
	    clamp
	    gain
	    gammacorrect
	    gnoise
	    mix
	    smoothstep
	    spline
	    step
	    vcnoise
	    vnoise


Sun Sep 19 13:39:45 1999  Cynbe ru Taren  <cynbe@muq.org>

	* First successful compile of a multi-user-c expression: :)
	    muc: 
	    "2+3*4;" evalString
	    [ 'muf:+
	    | 2
	    | [ 'muf:*
	    | | 3
	    | | 4
	    | ]
	    ]
	    muc: 14


Wed Sep 15 03:26:20 1999  Cynbe ru Taren  <cynbe@muq.org>

	*  (muc): Whee, muc:compileString just correctly diagnosed
	    abc
	as syntactically invalid (I hadn't noticed *blush*) and
	    abc;
	as syntactically valid.  First successful operation of a
	byacc-generated parse in Muq. :)

Sat Sep 9 22:40:12 1999  (9/9/99!) Cynbe ru Taren  <cynbe@muq.org>

	* Muq just drew its first teapot!
  	
	By my count we now have

              461 calls in portable, standard OpenGL+GLUT APIs.
              -78 so far unimplemented in Muq for technical reasons.
             ----
              383 OpenGL+GLUT API calls currently implemented in Muq.

	"Implemented" just means a MUF binding to the C library, of
	course. :)  I'm really impressed with Brian Paul's code quality,
	after a year of frigging with it I've yet to find an unambiguous
 	crashing bug.  Otherwise I'd not risk linking it into the main
	Muq server.  The Muq Gtk bindings definitely go in a separate
	process!

	Only a dozen or two of the OpenGL+GLUT calls have actually been
	tested at this point, however.

	* The skeleton of the MUC (Multi-User-C) compiler has now been
	integrated into the Muq source tree: a muq-byacc-to-muf Perl
	script converting byacc y.tab.c output from C to MUF, along with
	a muq/pkg/210-C-muc.y file with a sketch of the MUC (pronouced
	"moose") grammar.  And a nextMucTokenFromString C-coded prim to
	do the scanning, likewise currently very skeletal.

Tue Aug 24 01:29:35 1999  Cynbe ru Taren  <cynbe@muq.org>

	* jobbuild.t: Some new types/classes have been added,
	mostly with an eye toward supporting 3D graphics:
 	    VectorI01  bit vectors
 	    VectorI16  vectors of 16-bit integers.
 	    VectorI32  vectors of 32-bit integers.
 	    VectorF32  vectors of 32-bit floats.
 	    VectorF64  vectors of 64-bit floats.
	    Array      Multi-dimensional arrays of any of the above.
	    Table      Sets of named arrays of same shape.
	Note that the existing String type/class provides us with
 	vectors of 8-bit integers.

	* jobbuild.t: Class Index has been renamed to class Hash,
	and class SortedIndex to class Index.  The class which
	was sometimes called Object or Vanilla has been renamed
	to Plain.

Mon Aug 16 02:24:31 1999  Cynbe ru Taren  <cynbe@muq.org>

	* Cut symbol objects back to four slots by virtualizing
	the 'type' and 'proplist' fields in dbf btrees.

Fri Aug 13 06:32:20 1999  Cynbe ru Taren  <cynbe@muq.org>

	* Removed 'is_a' field from vectors, cons cells, strings
	and symbols.  This leaves the first three with zero slots
	of overhead, which feels good!  (Still have about 3 bytes
	of non-slot overhead.)

	* Removed global net1,net2,version fields, by way of
	further slimming down small objects such as cons cells
	and vectors.  This information is now stored only if
	needed, and then in a per-dbfile btree, with a bitflag
	signalling its presence as a speed hack.

Sun Aug  1 02:48:49 1999  Cynbe ru Taren  <cynbe@muq.org>

	* evt.t: Dropped hardwired Event (nee' Condition) class:
	Cleaner to do it entirely in softcode. evt.t is still
	needed at present for bootstrapping an empty db.

	* obj.t: Renamed .err index to .e partly because I think
	the brevity will be justified by frequency of use, mostly
	because I want to think of it as meaning ".event" at least
	as much as it means ".error".

Sat Jul 31 23:58:28 1999  Cynbe ru Taren  <cynbe@muq.org>

	* Renamed 'condition' to 'event' everywhere because:
	  o 'Event' is shorter and punchier than 'condition'
	  o 'Event' is technically more accurate:  Many things
	    signalled are instantaneous events rather than
	    continuing conditions (but the start of a condition
	    is always an event).
	  o 'Condition' is not well established outside the small
	    Lisp community, but 'event' is in quite general use.
	  o 'Event' is the standard name in GUI circles ("event
	    loop," "event queue" ...) which is I think one of
	    the richest applications of such a system.

Tue Jul 27 01:32:47 1999  Cynbe ru Taren  <cynbe@muq.org>

	* til.t: Added a tri-val clone of dil/sil as support for
	keeping net info only on those objects which need it.

Mon Jul 26 17:30:28 1999  Cynbe ru Taren  <cynbe@muq.org>

	* Removed global 'owner' field  by way of slimming down
	vectors, cons cells and objects.  (Ownership is now
	determinied implicitly according to dbfile containing
	object.)

Sat Jul 24 01:25:10 1999  Cynbe ru Taren  <cynbe@muq.org>

	* Removed global 'package' field by way of slimming down
	vectors, cons cells and objects.

	* vm.t: Added dbtab[] hashtable to speed mapping of dbfile
 	ids to corresponding Vm_A_Db record.

Thu Jul  8 16:41:20 1999  Cynbe ru Taren  <cynbe@muq.org>

	* Very first Micronesia random passphrases ever generated: :)
	    nut reefs harm killer food
	    pan sheets load bay cuts
	    loud weeks soap bog howls
	    pin snacks offer frock hunts
	    knit bras fail loom sprouts
	    rank gems paste spasm broads
	    suit whores crank low plants
	    lit gifts flail droll sects
	    gem snubs punch drowned toes
	    slop slaps owe kit poxes

Wed Jul  7 13:58:27 1999  Cynbe ru Taren  <cynbe@muq.org>

	* vm.t: Added support for .lzo (the new default) and .bz2
	compression, per a suggestion from Scott Crosby
 	(crosby@qwes.math.cmu.edu).  .lzo is at least twice as
 	fast as gzip in my tests, and teh fiels are only about
 	50% bigger.
  	  You may disable use of GZIP by defining the evironment
	variable MUQ_GZIP to the empty string.   You may enable
	use of GZIP if it is not in /bin /usr/bin or /usr/local/bin
 	by putting its full pathname in MUQ_GZIP.
  	  Similar comments hold for MUQ_BZIP2 and MUQ_LZOP.

Tue Jul  6 09:56:09 1999  Cynbe ru Taren  <cynbe@muq.org>

	* Muq v -1.44.0 release.

Sun Jul  4 08:59:54 1999  Cynbe ru Taren  <cynbe@muq.org>

	* Found Irix 'test' doesn't support "-e" test for existing:
	Changed to "-f" test for file in a couple of scripts.

Mon Jun 28 21:17:47 1999    <cynbe@muq.org>

	* vm.t: Multiple dbfiles now working nicely.

Sun Jun 20 14:57:43 1999    <cynbe@muq.org>

	* bnm.t: bnm_Divmod was aborting, apparently due to a
	sloppy divide-by-zero check I added at some point which
	clobbered the 'divisor' and 'dividend' parameters. *blink*

Sun Jun 13 15:39:40 1999  Cynbe ru Taren  <cynbe@muq.org>

	* jobbuild.t: Added two new prims,
	    dbnameToInt
	    intToDbname
	These are admin-relevant tools for mapping the 21-bit dbfile
	identifiers used internally to and from the human-readable
	ascii representations used in db filenames, as below.

	* vm.t: Db file name format has been changed to look like
	    vm-ROOTDB-0000120.db.gz
	    vm-ROOTDB-0000121.db.gz
	    vm-ROOTDB-0000122.db.gz
	    vm-ROOTDB-0000123.db.gz
	    vm-ROOTDB-CURRENT.db.gz
	    vm-ROOTDB-RUNNING.db.gz
	This is partly so old dbs don't get renamed the way the
	used to:  This will be helpful when mirroring db directories
	for backup purposes.
	  This is also partly in support of the currently in progress
	support for splitting a logical db into several (or several
	thousand...) physical db filesets, e.g., separate files for
	system libraries, or one db file per user.  Such splitting
	should simplify installation and update of new libraries,
	deletion or rollback of one user's state, and similar admin chores.

Thu May  6 11:04:28 1999  Cynbe ru Taren  <cynbe@muq.org>

	* vm.t: Now works with gzipped db files, uncompressing them before
	opening them and compressing them again after closing them.  Must
	have /bin/gzip and /bin/gunzip on system for this to work.

Sat May  1 01:23:10 1999  Cynbe ru Taren  <cynbe@muq.org>

	* vm.t: Switched from the old db format of a subdirectory
	containing fourteen octave files plus an index file, to a new db
	format which packs all those files into a single file, dispensing
	with the subdirectory.  That should simplify life for Muq system
	administrators, and reduce the danger of mixing files from
	different dbs.

Sat Apr 24 05:41:43 1999  Cynbe ru Taren  <cynbe@muq.org>

	* vm.t: Added magic "muq-db\n\0" at start of muq db index files,
	as support for Unix utilities like 'file'.

	* Switched muqnet serialization from bigendian ("network") order
	to little-endian order.  Rationale:
	->  Interoperability with "network order" based code is improbable.
        ->  There are more little-endian machines than big-endian machines.
        ->  The little-endian machines tend to be slowest, hence favoring
	    them them makes sense.
	->  The little-endian 86 architecture allows unaligned writes, and
	    thus can potentially benefit in a big way from little-endian
	    conventions, by writing full words unaligned into the output
	    buffer.  Most (all?) big-endian machines, by contrast, forbid
	    unaligned writes, and hence have to write a byte at a time into
            the output buffer anyhow, and don't care much which convention
	    is used.
	
1999-04-17    <cynbe@muq.org>

	* muf.t: Renamed
	    'makeObject'        to  'makeIndex'
	    'makeSortedObject'  to  'makeSortedIndex'
	    'vanilla?'          to  'index?'
	    'isVanilla'         to  'isIndex'
	by way of making the nomenclature more consistent.
	I was also finding that 'Object' was too vague in this context,
	and confusing in that 'makeObject' made something unrelated to
	the Muq Object System objects.  Finally, I found that I was
	typically using 'makeObject' to construct objects to be used
	as dictionaries/indices of one sort or another, so the name
	'Index' seemed likely to be clearer and less confusing.

Thu Apr 15 06:25:10 1999    <cynbe@muq.org>

	* muf.t: Changed
	    ~  ~.x
	(&tc) syntax to
	    me me.x
	&tc.  I think this is more readable, and the
	~ isn't being used heavily enough to justify
	the special single-character name.

	* muf.t: Changed syntax
	    /   replaced 'div' as division op
	    %   replaced 'mod' as modulus  op
	as part of making MUF more intuitive to
	C hackers.  (My favorite button from Balticon:
	"Why do hackers prefer C? Because it is the
	only language they can spell.")

Wed Apr 14 21:39:20 1999    <cynbe@muq.org>

	* muf.t: Changed muf syntax
 	    a<b>
	to
	    a[b]
	as part of trying to make C-trained hackers
	more comfortable with Muq.

Mon Apr 12 14:43:25 1999    <cynbe@muq.org>

	* Changed muf syntax to use '.' instead of '/'
	and '$' instead of '%':
	    old    new
	    ---    ---
	    /a/b   .a.b
	    a/b    a.b
	    a%s/b  a$s.b
	with the intention of eventually replacing
	"a%s" with "a->s".
	  The point of this change-over is primarily to
	make C programmers feel more at home in MUF.  Perl,
	Java and Tcl programmers should also find the change
	more intuitive.
 	  I also believe "a.b" is a bit more readable than
	"a/b" due to the dot leaving more whitespace than
	the slash, visually cutting the expression up more
	obviously.
	  A side-effect is that / and % are freed up to become
	division and modulus operators, which again will be
	more intuitive to most programmers, especially C-trained
	ones.
	  Also thinking about changing 'abc to &abc, but the
	resulting intuition might be more misleading than helpful.
	  (Done on laptop, 1st vacation to Bob + Daffne's.)
	

Wed Jan 27 00:12:59 1999    <cynbe@muq.org>

	* jobd.t: Changed export version of jobd.t to use
	a weak hash function rather than SHA, since rumor
	claims that it is now supposedly illegal to export
 	from the US code using SHA for digest authentication.

	* user.t: Changed so
	    user%s/email,
 	    user%s/homepage,
            user%s/pgpKeyprint
	    user%s/doNotDisturb
 	    user%s/doing
 	fields all update the userVersion flag.

Sun Jan 10 12:16:18 1999    <cynbe@muq.org>

	* usr.t: Added user%s/doing and user%s/doNotDisturb.

Tue Jan  5 01:06:52 1999    <cynbe@muq.org>

	* Makefile2.in (opt_muf): Added 'nice' various places,
	in the hope of being a better guest various places.

Sun Dec 13 12:48:16 1998    <cynbe@muq.org>

	* Running with ISDN at 56 Sunset Drive. :)

Mon Nov 30 00:33:47 1998    <cynbe@muq.org>

	* First successful build + selftest at
	56 Sunset Drive.  (Previous attempt failed
	when I discovered that the lightswitch
	controlled the wall socket powering chee...!)

Thu Nov 12 00:11:54 1998    <cynbe@muq.org>

	* obj.t: Changed obj_Startup() to give all users
	package libraries and default packages:  I just
	wasted a fair amount of time discovering that my
	attempt to fire up a user daemon for muqnet was
	failing due to lack of these.  Inconsistency always
	catches up with one in the end. :(

	* muq.t: Added
	    muq%s/logWarnings
	flag to dis/able writing of server-detected
 	exceptions to logfile.
	
	* Renamed
 	    muq%s/traceBytecodes
 	to
 	    muq%s/logBytecodes
	-- the latter is both shorter and more apropos now
	that trace output goes to the logfile instead of
	stdout.
 	
	* Renamed
 	    Muq.h --> All.h
	because Pakrat pointed out that having both
 	    muq/h/muq.h
 	    muq/h/Muq.h
	made it hard on the Windows port, since Windows
	is case-insenstive.

Fri Nov  6 17:15:02 1998  Jeff Prothero  <cynbe@muq.org>

	*  House closed! :)

Sun Oct  4 00:53:35 1998  Jeff Prothero  <cynbe@muq.org>

	* vm.t: Cut OFFSET field from 32 to 24 bits.  Reasoning
	is that 16M objects at 32 bytes each is half a gig of
	db -- a reasonable chunk -- and supporting good factoring
	of dbs into parts by expanding the DB field to 24 bit or
	so is probably a better use of address space than expanding
	the OFFSET field beyond 24 bits.

Thu Sep 24 11:10:40 1998  Jeff Prothero  <cynbe@muq.org>

	* Eliminated --security=high commandline switch, plus
	/muq%s/security value plus associated documentation.
	These weren't used anywhere, and I've decided that a
	single general "insecure" setting is a bad idea, people
	should have to switch off security precautions one at a
	time so they have more of an idea of what they are letting
	themselves in for.

Sat Sep 12 06:00:43 1998  Jeff Prothero  <cynbe@muq.org>

	* muq.t: Added new field
	    /muq%s/banned
	as support for Micronesia conflict resolution logic.

Fri Sep 11 21:02:10 1998  Jeff Prothero  <cynbe@muq.org>

	* muq.t: Added new fields
	    /muq%s/nextGuestRank
	    /muq%s/nextUserRank
	as support for Micronesia conflict resolution logic.

	* usr.t: Add usr%s/gagged property to support gagging
	of other users in Micronesia.

Sat Sep  5 06:43:29 1998  Jeff Prothero  <cynbe@muq.org>

	* vm.t: Bumped VM_OFFSET_SHIFT from 24 to 32, thus
	decreasing the offset field from 40 to 32 bits.  This
	-might- prove cramping eventually, but opens up the
	way to supporting up to a million or so dbs readable
	by a single Muq server.  One isn't likely to want that
	many open at one time, but a large distributed virtual
	world might wish to have a separate db for each user,
	and ship it to whichever Muq server is least loaded at
	login, say:  One can easily imagine 100,000 or more
	separate Muq db files in that sort of scenario.

	* Changed 'password' to 'passphrase' everywhere.

	* mss.t: Added mss%s/inputString and mss%s/inputStringCursor
	properties, as support for future compile-from-string
	functionality.

	* job.t: Added job%s/spareCompileMessageStream property,
	as support for future compile-from-string functionality.

	* Change 'port:30000' part of logfile entries to be
	'muq:198.161.029.208:30000': This way, one can do
	  sort -m *.log >merged.log
	to combine logfiles from different Muq hosts, which
	may be useful for tracking down problems in distributed
	worlds.

	* Fixed 'day' part of logfile dates to be %d instead of %e.

Tue Aug 18 18:22:56 1998  Jeff Prothero  <cynbe@muq.org>

	* usr.t: Added integer usr%s/rank field as conflict
	resolution support.

Sun Aug 16 09:02:28 1998  Jeff Prothero  <cynbe@muq.org>

	* jobc.t: Eliminated old 'rootLog' function (which
	I didn't find yesterday... -thought- I'd written
	something like that!) in favor of a new rootLogString
	companion funciton to ]rootLogPrint.  Also added
	unprivileged-user variants ']logPrint' and 'log,' which
	may be dis/abled via '/muq%s/allowUserLogging'.
	   Added logic to re-open the logfile once per minute,
	to support rotation of logfiles via external scripts.

Sat Aug 15 11:00:45 1998  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added a ]rootLogPrint command just like
	]print except result is written to logfile.

	* z-muq.t:  Added a --logfile=myfile.txt commandline
	option to specify server logfile.

Fri Aug  7 22:04:44 1998  Jeff Prothero  <cynbe@muq.org>

	* stm.t: stm_Nth() and stm_Set_Nth() had
	    len = (vlen-rat) + cat;
	where they needed
	    len = (vlen-cat) + rat;
	and also
 	    if (n >   len) n -=  len;
	where they needed
 	    if (n >= vlen) n -= vlen;
	This bug dates back to the 1995 creation of Stream,
	likely (unless the _Nth() operators came later), and
	appears to be the one that was fouling up say/pose/...
	performance when BobTheJanitor popped in on a very
	early Micronesia test.  The bug appears to have
	escaped detection this long primarily because I almost
	always use Stacks rather than Streams.  (MessageStreams
	being another issue entirely...)
	
Thu Aug  6 21:31:08 1998  Jeff Prothero  <cynbe@muq.org>

	* rex.t: rex_Begin() was calling validate(0,stringlen)
	which is an error when stringlen > REX_MAX_BUF.  This
	error dated back to the implementation of regular
	expressions in June.

Wed Jul 29 17:11:48 1998  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added JOB_ENBYTE_USER support to
	job_P_Enbyte() + job_P_Debyte():  This special-cases
	the de/serialization of pointers to Root/User/Guest
	objects, so that they come through as Guests at the
	far end, instead of as proxies.  This avoids having
 	both Proxy and Guest representations for the same
	object on the same server, reducing confusion and
	making comparisons for equality work better.

	* job.t: Noticed by code inspection that job_P_Debyte()
	wasn't allowing objects of type char to be converted.
	Error probably dating back to creation of the function.
	

Sun Jul 12 21:30:17 1998  Jeff Prothero  <cynbe@muq.org>

	* bnm.t: Off-by-one error in bnm_TrulyRandomInteger()
	was returning a bignum instead of a fixnum when asked
	for a 61-bit result:  A silent error with only
	efficiency implications, except that the muqnet code
	specifically expects a fixnum for the random padding.

Sat Jul 11 15:12:25 1998  Jeff Prothero  <cynbe@muq.org>

	* jobb.t: First successful muqnet round-trip diffie-hellman
 	packet authentication. :)

Sat Jul 11 00:42:45 1998  Cynbe ru Taren  <cynbe@grizzly.BanffCentre.AB.CA>

	* gcc 2.8.1 quite rightly complained about 'char' being
	used to index arrays -- pointless risk of different results
	on machines with signed vs unsigned chars.  Especially with
	8-bit ascii becoming more common!  Fixed various places
 	it pointed this out.

Fri Jul 10 08:16:13 1998  Jeff Prothero  <cynbe@muq.org>

	* z-muq.t: Changed from
 	    void main( ... ) ...
	to
 	    int main( ... ) ...
	various places -- gcc 2.8.1 was complaining.
	
	* jobbuild.t: Added |debyteMuqnetHeader prim, support
	for muqnet daemon.

Thu Jul  9 06:30:22 1998  Jeff Prothero  <cynbe@muq.org>

	*  (vm.h):  A
	    #ifndef   INCLUDED_JOBPASS_H
	    #include "jobpass.h"
	    #endif    INCLUDED_JOBPASS_H
	had crept in, which the latest gcc (2.8.1) correctly complains
	about as being non-ANSI (nothing but whitespace and
	comment are allowed on the line after an #endif). Fixed.
	
	* aclocal.m4: Appears that in the latest version of GNU
 	autoconfig, $ac_compile no longer suppresses stdin/stdout:
	After rebuilding Configure, was suddenly getting jarring
	compile errors during the prototype-present checks.  (Still
	worked fine, but likely to disconcert people doing installs.)
	  I added ">/dev/null 2>&1" after the "eval $ac_compile",
	which seems to have nicely restored the status quo ante.
	  (NB: The prototype checks aren't part of the standard
	autoconfig distribution, so the authors wouldn't be able
	to update them.  Having $ac_compile not suppress this stuff
	is probably the Right Thing, since it is easier for the
	caller to add ">/dev/null 2>&1" if it doesn't need the
	output than it is for it to recover suppressed output.)
	
Wed Jul  8 22:44:56 1998  Jeff Prothero  <cynbe@muq.org>

	* Irix6.x was complaining about crypt() prototypes,
	and we're not using crypt() any more anyhow, so I
	stripped out all references to it.

	* gcc 2.8.1 considers "static i;" to be something to
	complained about: Various minor edits to humor it.

Sat Jul  4 21:19:55 1998  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added a
	    ||swap
	prim for swapping two blocks on the stack.

Wed Jul  1 13:33:42 1998  Jeff Prothero  <jsp@muq.org>

	* jobbuild.t: Got sick of "userOrGuest?" everywhere, and
	shortened it to "folk?".  Happy Canada Day in Banff! :)

Wed Jun 24 07:14:39 1998  Jeff Prothero  <jsp@muq.org>

	* usr.t: Changed 'locationServer' to 'userServer' throughout,
	partly because it is shorter, mostly because the serve up  all
	critical user information, not just location.

Mon Jun 22 10:05:33 1998  Jeff Prothero  <jsp@muq.org>

	* job.t: job_P_Enbyte() case of encoding a proxy (as opposed to
	encoding proxy information for non-proxy objects) got missed
	during the 32->64 bit transition.  Missed by test suite, caught
	by inspection.  (A good test-coverage analysis tool might have
	helped.)

	* fun.t: Added a %s/doc field to functions to hold documentation,
	as opposed to source.  I was probably planning to add this as a
	property, but today I'm in a mood to make it a fixed slot. :)

	* obj.t: For some reason obj_Neql() had
		{      int i = OBJ_TO_INT(b);
	where it needed
		{   Vm_Int i = OBJ_TO_INT(b);
	which manifested itself as an inability to do o<i> when 'i' was a
	fixnum of more than 32 bits.  This bug would date back to
	January's converstion from 32-bit to 64-bit operation.
	
	
Sun Jun 21 06:51:04 1998  Jeff Prothero  <jsp@muq.org>

	* usr.t:  Added some properties to User (and Guest)
	objects in support of transparent networking:
	    %S/nickName         Max 16 chars of text nickname.
	    %S/longName         Diffie_Hellman public key.	
	    %S/trueName         Diffie_Hellman private key.	
	    %S/hashName         61-bit (i.e., positive fixnum) hash of longName.
	    %S/sharedSecrets    Shared Diffie_Hellman secrets indexed by hashName.
	    %S/ip0              These give last known IP address of this
	    %S/ip1              user.  Mainly useful for guest (remote) users,
	    %S/ip2              but for simplicity we
	    %S/ip3              use identical records for
	    %S/port             local and guest users.
	    %S/ioStream         Last known I/O stream on which user was communicating.
	    %S/locationServer0  Muqserver which should known user's current location.
	    %S/locationServer1  Muqserver which should known user's current location.
	    %S/locationServer2  Muqserver which should known user's current location.
	    %S/locationServer3  Muqserver which should known user's current location.
	    %S/locationServer4  Muqserver which should known user's current location.
	    %S/locationVersion  Incremented each time location changes.
	    %S/dateAtWhichWeLastQueriedLocationServers  To help avoid thrashing them.

	* usr.t: Added a class Guest parallel to existing classes
	Root and User:  Guest represents users on other servers,
	and instances will in general be created primarily by the
	transparent networking support and then used as 'who' values
	in message stream packets.  This is intended to make remote
	users 'look' as much as possible like local users (for network
	transparency) while maintaining a clear distinction (for
 	security).
	   Also added some matching primitives:
	       guest?
	       guestOrUser?
	       rootMakeGuest
	       

Sat Jun 20 09:13:38 1998  Jeff Prothero  <jsp@muq.org>

	* job.t: Added bignum support to job.t:Enbyte and Debyte:
 	Bignums will now be sent by value instead of by reference
	between Muq servers when sending requests &tc.

	* obj.t: Hrm, appears when I set up muq_RandomState, I got
	so lost in the other details that I forgot to add calls to
	actually stuff random entropy into the buffer.  Added calls
	to add the time into it after each net or disk read(), to
	microsecond accuracy if possible, else to second accuracy.

	* jobbuild.t: Fixed bug where
 	  -2305843009213693952 neg
	did not yield
 	   2305843009213693952
	This was a known problem I didn't have time to fix
	before doing the -1.42.0 release:  Since there is
	one more negative number than positive number in
	two's complement binary notation, there is one negative
	number which cannot be negated without switching from
	fixnums to bignums -- which, in the current Muq encoding
	scheme, comes out to be -2305843009213693952.

	* Added a 'version' field to all non-immediate values.
	I hate adding overhead, and this field is currently unused,
	but I believe it will eventually prove crucial to implementing
 	nice distributed computing stuff in Muq: It will allow remote
	dbs to verify that a mirrored object is up-to-date without
	having to send the entire object over the wire or hash/checksum
	the entire object, or whatever.

	* Now ensconced at the Banff Centre.  Whee! :)
	Naturally, chee's powersupply smoked immediately upon
	arrival!

Wed Jun 10 19:23:18 1998  Jeff Prothero  <jsp@muq.org>

	* Muq v -1.42.0 release.

Wed Jun 10 21:26:40 1998  Jeff Prothero  <jsp@muq.org>

	* jobb.t: Regular expression support seems to be
	working to a first approximation:  See "rex:" in
	reference manual.

Wed Jun  3 15:38:15 1998  Jeff Prothero  <jsp@muq.org>

	* muf.t: Fixed a couple of typos that crept into the
	renaming passes:  Several predicates wound up with
	'??' instead of just '?' at the end, and
	|unreadTokenChar wound up as |unreadRokenChar

	* muf.t: A few final identifier renamings that slipped
	through earlier passes:
	    |bracket-position         -> |bracketPosition
	    |keysvals-reverse         -> |keysvalsReverse
	    |root-write-stream-packet -> |rootWriteStreamPacket
	    |scan-token-to-char-pair  -> |scanTokenToCharPair

Wed May 27 18:56:51 1998  Jeff Prothero  <jsp@muq.org>

	* rex.t: Seem to have a basic set of low-level
 	regular expression support primitives working now:
	    rexBegin
	    rexCloseParen
	    rexDone?
	    rexEnd
	    rexGetCursor
	    rexMatchCharClass
	    rexMatchString
	    rexOpenParen
	    rexSetCursor
        (Sort of a break from serious coding. :)  Next task
	on that front is to softcode a regex compiler that
	uses them....

Sat May 23 15:29:29 1998  Jeff Prothero  <jsp@muq.org>

	* jobbuild.t: Added and tested two prims,
 	    |signedDigest
 	    |signedDigestCheck
	for creating and verifying Diffie-Hellman block
	signatures.  Together with the new
	    generateDiffieHellmanKeyPair
	    generateDiffieHellmanSharedSecret
	functions, that should just about complete the
	immediately essential C-server authentication support,
	I hope.  (Pretty damn dreary coding, I must say.)
	
Tue May 12 19:51:14 1998  Jeff Prothero  <cynbe@muq.org>

	* bnm.t: Basic fixnum/bignum integration complete.
	Though I'm sure we'll be adding bignum support in
	various spots for quite awhile, as holes show up...

	* jobbuild.t: Hrm, we were also missing 'lognot'.
	Added fixnum and bignum support for it.

Sun May 10 16:47:16 1998  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Yow, discovered Muq has never had a unary negate
	operator, when I went to hook up the new bignum negate operator to
	the original one.  Added a new 'neg' prim to fill the hole.

Sun May  3 05:24:21 1998  Jeff Prothero  <cynbe@muq.org>

	* jobc.t: Added 'bignum?' and 'fixnum?' prims for those
	rare times when finer distinction than 'integer?' is
	needed.

Sat May  2 14:18:19 1998  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added 'bits' prim returning number of bits
	in an integer.

Mon Apr 27 14:08:49 1998  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Added a trulyRandomInteger function,
	intended to be a truly random bitsource for digital
 	signatures &tc.

	* bnm.t: Core bignum functions (this month's project)
	seem to be working: computed
 	    (7777 ** (2**9941 -1)) mod (2**9941 -1)
	and got correct answer.

Sat Apr 11 01:40:40 1998  Jeff Prothero  <cynbe@muq.org>

	* bnm.t: Tracked down a bnm.t nastybug:  adds() was
	carrying zero into a word beyond length of number.
	Length computation wound up correct, as did result,
	so silent zeroing of one unrelated word resulted,
	which took awhile to track down.
	  I can't quantify it, but essentially all the
 	nastybugs being exposed are in recently written code,
	which to me is suggestive statistical evidence that
	we don't have too many old nastybugs waiting to spring
	on us postbeta.

Sun Mar 29 22:04:52 1998  Jeff Prothero  <cynbe@muq.org>

	* bnm.t: Whee -- just computed all the powers of ten
	from 0 to 1000 in Muq!  Feeling less like a toy all
	the time...

Mon Mar 23 22:52:09 1998  Jeff Prothero  <cynbe@muq.org>

	* jobc.t: Floor, Ceiling, Truncate and Round were using
	an 'int' where a Vm_Int was required, resulting in loss
	of precision that only became evident with shift to 64-
	bit implementaiton.

Sun Mar  8 10:10:43 1998  Jeff Prothero  <cynbe@muq.org>

	* sil.t: Added sorted btrees, as a convenient alternative
	to hashed btrees for many purposes.  This involved, among
	other things, added muq/c/sil.t and muq/c/Check/x-sil.t,
	renaming "makeBtree" to "makeHashedBtree", and adding a
	"makeSortedBtree" and a makeSortedObject.

Sat Mar  7 05:26:13 1998  Jeff Prothero  <cynbe@muq.org>

	* Capitalized and dehyphenated a scattering of db-visible
	identifiers that got missed in the main Algolification
	pass, mainly classnames.

Wed Mar  4 19:50:26 1998  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Bug reported by Pakrat: skt.t:open_listen_port()
	had
	    Vm_Int option = TRUE;
	    if (-1 == setsockopt(
		    fd,
		    SOL_SOCKET,	/* Protocol level to handle this call.	*/
		    SO_REUSEADDR,	/* Option to set.			*/
		    (char*) &option,/* Value to set for option.		*/
		    sizeof( option )/* More useful in other calls to ths fn!*/
	    )   ) {
	where "option" should be declared as "int" not "Vm_Int".  This
	bug dates back to the 32->64 bit conversion in January, slipped
	through the compiler because the (char*) cast required by the
	setsockopt() API foiled normal strong typechecking, and apparently
	didn't show in in testing due to not being very critical.
	  Examined all instances of '&' in skt.t without finding any
	additional examples of this bug:  Other cases either didn't
	involve address of an integer, or had been correctly hand-converted.
	  Such bugs are much less likely in other source files, since skt.t
	contains most of the funky Unix API calls of this nature.

Mon Mar  2 12:19:20 1998  Jeff Prothero  <cynbe@muq.org>

	* Muq v -1.41.0 release.

Wed Feb 25 20:04:37 1998  Jeff Prothero  <cynbe@muq.org>

	* dil.t: Changed value for null btrees from OBJ_FROM_INT(0)
	to new special value OBJ_NULL_BTREE.  This makes more plausible
	a 'btree?' predicate true of btrees but not of other values.

Sun Feb 22 08:12:21 1998  Jeff Prothero  <cynbe@muq.org>

	* Changed in-db code to apply |secureHash twice to
	passwords, instead of just once.  This way, the first hash
	gives us a number not explicitly in the db, which can be
	used for public/private keypair generation and the like,
	if desired.

	* Experimented a bit with db tuning.  Micronesia db
	currently comes in at about 5Meg of useful data, running
	as shipped out of an 8Meg buffer with garbage collection
	done every 0.5Meg of allocation.
  	  Doubling the ram buffer size to 16Meg and doing garbage
	collections only every 4Meg of allocation cuts CPU usage
	about in half.
	  For demo purposes, prolly too many 16Meg machines out
	there: Better to ship with the 8Meg setting, I think. But
	production systems will probably want to substantially
	increase the values of Defaults.h:VM_INITIAL_BIGBUF_SIZE
	(or else /muq/dbBufSize) and also of
	obj.t:OBJ_BYTES_BETWEEN_GARBAGE_COLLECTIONS (or else
	/muq/bytesBetweenGarbageCollects), presuming sufficient
	system resources to do so.
	
	* Increased MUQ_NET2_RESERVED_BITS from 5 to 15.  This
	reserves space for addition of values like time-to-live,
	read/only &tc to all non-immediate values in the db --
	more room for future upward-compatible changes without
	breaking existing dbs.

Sat Feb 21 05:18:03 1998  Jeff Prothero  <cynbe@muq.org>

	* Reserved space in various hardwired object classes
	to ease	future db-upward-compatible tweaks to system:
	   Assembler:     8 slots
	   Function:      4 slots
	   Job:          32 slots
	   JobSet:        4 slots
	   Key:          16 slots
	   LambdaList:    4 slots
	   Lock:          4 slots
	   MessageStream  8 slots
	   Method:        4 slots
	   Muq:          40 slots (already had this)
	   Proxy:         2 slots (already had this)
	   ReadTable:    16 slots
	   Socket:       16 slots
	   Session:       4 slots
	   System:      128 slots
	   UserQueue:     2 slots
	   User:         64 slots	
	
Thu Feb 19 15:30:43 1998  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Dropped |crypt fn, |secureHash does the same job
	better and doesn't have the portability or export control probs.

Wed Feb 18 20:31:02 1998  Jeff Prothero  <cynbe@muq.org>

	* sys.t: sys_date_usecs2() was erroneously calling
	OBJ_TO_INT() on its return value, which was supposed
	to be a Vm_Int not Vm_Obj, resulting in a twice-encoded
	/sys/dateMicroseconds value which maxed out at 4,000,000
	instead of 1,000,000 ... confusing calling code horribly.
	 Another bug which would have been caught by stronger
	typing of Vm_Int vs Vm_Obj.

	* jobbuild.t: Changed "union Job_Any_Prim" to have
	"r" be type "Vm_Flt" instead of "float".  Not doing
	so during the upgrade from 32- to 64-bit operation
	introduced an under-precision bug, which became obvious
 	when trying to do do floating point computations on
	millisecond-accuracy dates.

	* vm.t: Increased VM_OFFSET_SHIFT from 10 to 24 bits,
	effectively reserving 14 bits for future expansion.
	This actually required cleaning up the code a bit,
	since decoupling VM_OFFSET_SHIFT from VM_TAGBITS +
	VM_OCTAVE_BITS hadn't originally been envisioned.

Sat Feb 14 09:43:32 1998  Jeff Prothero  <cynbe@muq.org>

	* vm.t: Wasted about half a day discovering that vm_First()
	was assuming that `(Vm_Obj) 0` == `objImplode( 2, 0 )` which
	was true in old encoding but not revised one.  Silly penny-
	ante optimization/laziness that usually catches up with one...

Tue Feb 10 17:05:44 1998  Jeff Prothero  <cynbe@muq.org>

	* Looks like an bug apparently introduced by the 63 -> 62
	bit integer transition was in fact introduced by failing
	to bump an x-nanomud readAnyStreamPacket argument from
 	50 to 50000 when converting Muq from second to millisecond
	time currency, resulting in occasional stochastic failures
	when running that test.  Wasted best part of a week tracking
	down that simple oversight. :(
	   Finally tracked that down by using emacs' compare-window
	on two 40MB bytecode instruction traces of successive runs
	of x-nanomud, to locate the first virtual instruction on
	which execution differed -- 107271th bytecode, as it happened.
	Beat single-stepping through the run by hand!
	
Sun Feb  8 09:28:00 1998  Jeff Prothero  <cynbe@muq.org>

	* job.t: Another old bug exposed as below: job:for_new()
	had 	if (!stk_Got_Headroom( s, OBJ_TO_INT(64) )) MUQ_WARN ("Yikes!");
	where   if (!stk_Got_Headroom( s,            64  )) MUQ_WARN ("Yikes!");
	was appropriate -- a silent quasi-bug that merely resulted in
	initial stack size being 32 instead of 64.  As below, stronger
	typing in the compiler would have caught this trivially.
	
Sat Feb  7 06:51:38 1998  Jeff Prothero  <cynbe@muq.org>

	* stk.t: Old bug exposed: stk_Got_Headroom()
	had      Vm_Int len =             STK_P(stk)->length  ;
	where    Vm_Int len = OBJ_TO_UNT( STK_P(stk)->length );
	was needed.  This wasn't immediately obvious since it
	resulted in stacks allocating twice the needed space
	but otherwise yielded correct results;  Bug was exposed
	by diffing bytecode execution logs of Muq servers
	compiled to use 63- vs 62-bit integers.  A good example
	of a bug that would have been caught immediately by a
	strongly typed compiler that distinguished Vm_Obj from
	Vm_Int.

	* Another batch of 148 renamings from xxx-yyy to xxxYyy
	format:  Last time, did the MUF prims but forgot the special
	object properties.
	
Thu Feb  5 19:02:04 1998  Jeff Prothero  <cynbe@muq.org>

	* Converted from time currency of seconds to
	one of milliseconds.

Tue Feb  3 14:33:45 1998  Jeff Prothero  <cynbe@muq.org>

	* Added a 'package' slot to every non-immediate datatype.
	I dislike increasing fixed overhead, but without this, there
	is no sane way to save an in-db package as a unit -- and
	byte-scrounging should never be allowed to cripple major
	functionality like that. This gives us four fixed overhead
	fields on everything:
 	  The owner, needed for accounting and priv-checking;
	  The package, needed for sane save/restore by package;
	  NET1 and NET2, needed to support networking.
	
Mon Feb  2 16:50:01 1998  Jeff Prothero  <cynbe@muq.org>

	* stc.t: stc_Dup() was delegating most of its work to
	obj_Dup() -- but obj_Dup assumes its argment has
	propdirs, and attempts to initialize them, while
	structs in fact do not have propdirs.  This should
	have been trashing memory in nasty fashion, disquieting
	that it escaped this long.  This might be one of the
	observed but unsolved server crashers.

Sat Jan 31 10:28:42 1998  Jeff Prothero  <cynbe@muq.org>

	* Dropped old object MUF model, including the method
	propdirs on objects. Two OOP implementations in Muq
	is one too many. :)

	* Completed renaming all prims and library identifiers
	from "do-this" to "doThis" format, in order to be more
	friendly to algolic syntax Muq languages.

Fri Jan 30 20:35:45 1998  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added two 'missing' prims:
	    upcase
	    downcase
	(We had these for strings and blocks of chars but not
	individual chars.)

Fri Jan 23 03:52:43 1998  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Switched to case-sensitive, matching similar change in
	in-db MUF compiler.

	* Removed old propdir stuff (set.t/map.t/dir.t &tc).

	* dil.t: Finally got new propdirs to pass full test suite.
	Wound up being about three days to write and test propdir code
	proper and about three weeks to integrate it into Muq. :)
	 Final and most obscure bug was that dil.t assumed users would
	iterate by calling dil_First() followed by dil_Next() repeatedly,
	but various bits of code find it more convenient to start by calling
	dil_Next(OBJ_FIRST), which worked for the old propdir
	implementation but not in the new.
	 Added a special-case check for OBJ_FIRST in dil_Next as a fix.
	
Mon Jan 19 09:38:27 1998  Jeff Prothero  <cynbe@muq.org>

	* obj.t: Added 'doTypes' to struct Obj_Module_Summary_Rec --
	startup ordering was getting too hairy with just two passes,
	with the new propdir code.
	
Sat Jan 17 14:31:45 1998  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added a 'hash' prim which converts arbitrary
	values into integer keys suitable for use in a hashtable.
	('secure-hash' by contrast works only on strings.)

Sat Jan 10 22:36:58 1998  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Removed old 'hash' prim: Better
	to use secure-hash.

	* jobbuild.t: Added some SHA-1 based primitives:
	    secure-hash
	    secure-hash-binary
	    secure-hash-fixnum
	   |secure-hash
	   |secure-hash-check
	They all use the same underlying code, but attempt to
	cater to different common applications.  We should
	probably remove the 'crypt' based stuff, switching the
	softcode over to the above SHA-1 prims, which are higher
 	quality, more portable, and less subject to legal problems.
	
Fri Jan  9 19:32:58 1998  Jeff Prothero  <cynbe@muq.org>

	* jobc.t: Old bug exposed by 32->64 bit transition:
	job_P_Delete_Package was calling job_must_control(arg)
	before maybe converting string to package argument,
	resulting in an erroneous error thrown when arg is a
 	short string, since no job can control a constant string.
	(Arg was "test", which is an in-pointer constant in 64-bit
	mode but not in 32-bit mode.)
	
Fri Jan  2 10:57:31 1998    <cynbe@muq.org>

	* stc.t: 64-bit operation exposed an old bug:
	stc_Dup_Est() wasn't initializing owner, net1 or
	net2 fields, resulting in a server crash when the
	garbage collector tried to interpret the contents.
	Duplicate code in clo.t had same bug.

Thu Jan  1 20:17:47 1998    <cynbe@muq.org>

	* The 64-bit penalty: 50% slowdown on Intel Linux.
	--------------------------------------------------
	I compared time to load the Muq libraries (best CPU-
	intensive realistic Muq benchmark I have) over two runs:
	  Of a 32-bit version of the Muq server (Vm_Int==int):
	104.220u 8.660s 2:04.23 90.8% 0+0k 0+0io 13692pf+0w
	101.830u 7.760s 2:03.73 88.5% 0+0k 0+0io 13673pf+0w
	  Of a 64-bit version of the Muq server (Vm_Int==long long):
	161.400u 9.730s 3:07.62 91.2% 0+0k 0+0io 14670pf+0w
	161.890u 9.250s 3:08.53 90.7% 0+0k 0+0io 14220pf+0w
	  All the above done on 48Meg 100MHz Pentium laptop.
	  Since 32-bit computing is clearly a twilight industry,
	I consider a 50% slowdown for Muq a very reasonable price
	to pay in return for elimination of problems when networking
	Muq servers on 32 and 64 bit machines, and when moving an
	existing Muq db from a 32 to a 64 bit host machine.
	  Muq, after all, is about interactive multi-user networked
	applications, not batch numbercrunching:  Performance should
	be a secondary issue most of the time, and when it is an issue
	at all, networking delays are likely to dominate integer
 	CPU bandwidth.
	
Thu Jan  1 07:28:29 1998    <cynbe@muq.org>

	* vm.t: In three places, code had hardwired constant
	4 instead of VM_INTBYTES as the size in bytes of the
	full size field in memory.

	* obj.t: obj_Startup() was doing  vm_Dirty(obj_Etc)
	(an unitialized value) instead of vm_Dirty(etc). Odd
	that this worked ok until tried in 64-bit mode...
	(Ah: Picture-perfect snowfall in PhaseII, Saltspring!)
	
Mon Dec 29 17:33:33 1997    <cynbe@muq.org>

	* skt.t: Changed doing_metadata() to use memchr() instead
	of a C-coded loop, cutting Muq library install time from
	3 minutes to 2 on my 48MB ram 100MHz Pentium laptop.
	Shouldn't really be optimizing pre-beta, but hard to resist
	a win like that when gprof makes it glaringly obvious...
	Still should rewrite it properly sometime post-beta.
	(Compiling with -O9 results in no obvious performance gain.)
	
Sun Dec 28 12:05:13 1997    <cynbe@muq.org>

	* vm.t: db saves are taking much longer than I like.
	Rewrote bigbufClean() to write dirty objects to disk
	in sorted order:  Saves are now possibly 2x faster
	than before, but still something like 10x than would
	be with a simple sequential dump.  I'd like to rewrite
	it to save and restore the working set from a sequential
 	file, but that had best be deferred to post-beta.

Sun Nov 30 06:42:35 1997  Jeff Prothero  <cynbe@muq.org>

	* -1.40.0 release.

Sun Oct 26 10:02:40 1997  Jeff Prothero  <cynbe@muq.org>

	* jobb.t: Fixed: Bug in job_P_Shiftp_N_From_Block (|shiftp-n),
	had an 'i' where a 'b' was needed.

Sun Oct 26 08:53:25 1997  Jeff Prothero  <cynbe@muq.org>

	* From too much love of living
	  From hope and fear set free
	  We thank with brief thanksgiving
	  Whatever Gods may be

	  That no life lives forever
	  That dead men rise up never
	  That even the weariest river
	  Winds somewhere safe to sea

	   -- Algernon Charles Swinburne in
	      The Garden of Proserpine
	      http://www10.geocities.com/Athens/8679/swith.htm

Sun Oct 12 17:43:53 1997  Jeff Prothero  <cynbe@muq.org>

	* joba.t: Added
	    hash
	primitive to hash strings to ints quickly and conveniently.

Sun Sep 28 22:43:00 1997  Jeff Prothero  <cynbe@muq.org>

	* joba.t: Added
	    substring[
	prim to extract substring as a block of chars instead of
	as another string (as the existing 'substring' prim did).

Sun Sep 28 02:58:53 1997  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added |maybe-write-stream-packet support for
	muf:maybe-write-stream-packet, thus allowing packets
	to be written directly to rmote objects rather than
	their io queues, and still get handled correctly --
	simplifies life for the caller.
	
Sat Sep 27 21:06:52 1997  Jeff Prothero  <cynbe@muq.org>

	* jobb.t: Added |gep prim to prettify keyval argblock handling.

Mon Sep 22 21:37:32 1997  Jeff Prothero  <cynbe@muq.org>

	* jobb.t: Added |shiftp-n prim to shift and drop N args from block.

Sat Sep 13 10:39:26 1997  Jeff Prothero  <cynbe@muq.org>

	* Added job property
	    @%s/task
	to support muq/pkg/345-W-oldat-home.t functionality.
	
Sat Aug 23 10:23:20 1997  Jeff Prothero  <cynbe@muq.org>

	* Added |first prim, just because it reads better than "0 |dup-nth".

Thu Jul 10 01:07:24 1997  Jeff Prothero  <cynbe@muq.org>

	* obj.t:obj_Startup(): root had an invalid is_a because it has to
	be created before the classes can be.  Patched, but there are sure
	to be other such objects:  Need to do a sweep sometime and catch
	them all.

Fri Jul  4 16:33:42 1997  Jeff Prothero  <cynbe@muq.org>

	* sdf.t: Renamed sdf%s/file-line to sdf%s/fn-line for consistency.

	* key.t: Renamed key%s/file-line to key%s/fn-line for consistency.

	* fun.t: Renamed fun%s/file-line to fun%s/fn-line for consistency.
	with below.

	* asm.t: Renamed asm%s/file-line to asm%s/fn-line for clarity.

	* muf.t: Renamed assemble-line-number to assemble-line-in-fn
	for consistency with below.  Prolly should eliminate it, really.

	* asm.t: Renamed asm%s/line-number to asm%s/line-in-fn for clarity.

	* asm.t: Added fn_name (and %s/fn-name).

Tue Jul  1 01:23:29 1997  Jeff Prothero  <cynbe@muq.org>

	* job.t: Hacked job_P_Program_Counter_To_Line_Number()
	to return NIL instead of throwing an error on finding no
	valid line number vector:  BAD currently has none, and
	sits on the bottom of the stack to catch bad returns,
	so the error was getting thrown every time the debugger
	tried to do a stacktrace.  Need a prettier fix someday.

Fri Apr 11 00:15:58 1997    <cynbe@muq.org>

	* jobbuild.t: Added two prims
	    delete-bth
	    delete-nth
	for deleting entries from stacks.

Sat Mar 29 16:00:39 1997    <cynbe@muq.org>

	* stk.t: Hacked 'delete' to work on stacks as well
	as lists, deleting all instances of given value.

Wed Feb 26 23:04:39 1997    <cynbe@muq.org>

	* xx-oldmud2.muf: First successful 'look' at a room
	on a remote muq server :).

Mon Feb 24 23:19:36 1997    <cynbe@muq.org>

	* First successful get-val on a remote object. :) :) :)

Sun Feb 23 11:11:29 1997    <cynbe@muq.org>

	* joba.t: Added a prim
	    get-muqnet-io
	as a convenience function supporting transparent
	networking.

	* job.t: Added
	    job%s/muqnet-io
	property to hold dedicated stream for transparent
	networking support.

	* jobbuild.t: Added prims
	    ]muqnet-keysvals-set
	    ]muqnet-set
	    muqnet-del-key
	    muqnet-del-key?
	    muqnet-get
	    muqnet-get-first-key?
	    muqnet-get-key?
	    muqnet-get-keys-by-prefix[
	    muqnet-get-next-key?
	    muqnet-get?
	    muqnet-keys[
	    muqnet-keysvals[
	    muqnet-set
	    muqnet-vals[
	by way of support for transparent networking.
	

Sat Feb 22 12:17:08 1997    <cynbe@muq.org>

	* job.t: Added some transparent networking support
	to the job_x_p_* fns, hacking them to call the appropriate
	muq/pkg/19-C-muqnet.t function when invoked on a
	proxy object.

Thu Feb 20 22:53:03 1997    <cynbe@muq.org>

	* job.t: Added support in the
	    |enbyte
	    |debyte
	prims for by-value transmission of keywords
	with names of 255 bytes or less.  (We need this
	so operations like avatar/io can work on remote
	objects.)

Wed Feb 19 23:48:33 1997    <cynbe@muq.org>

	* jobc.t: Added
	    proxy-info
	prim returning contents of proxy object (host IP,
	port and dbref).  The point of this is that eventually
	the regular property-fetch functions will return the
	properties of the proxied object on the remote server,
	not those on the proxy itself, but the networking code
	still needs a way of accessing the proxy object contents.

Wed Feb 19 21:41:54 1997    <cynbe@muq.org>

	* Configure.in:  Andrew Bolt (Andrew.Bolt@ait.co.uk)
	reported that Muq autoconfig wasn't properly detecting
	the argument count for setpgrp() under RiscOS: Changed
	    AC_MSG_CHECKING(setpgrp args)
	    AC_TRY_COMPILE(,[
	    setpgrp();
	    ],[AC_MSG_RESULT(0);AC_DEFINE(HAVE_ZERO_SETPGRP_ARGS)],
	    AC_MSG_RESULT(2))
	to
	    AC_MSG_CHECKING(setpgrp args)
	    AC_TRY_COMPILE(,[
	    #ifdef HAVE_UNISTD_H
	    #include <unistd.h>
	    #endif
	    setpgrp();
	    ],[AC_MSG_RESULT(0);AC_DEFINE(HAVE_ZERO_SETPGRP_ARGS)],
	    AC_MSG_RESULT(2))
	in hope of resolving the problem.


Wed Feb 19 00:13:35 1997    <cynbe@muq.org>

	* job.t: Fixed recently introduced bug related to
	fall-through cascade in job.t:job_P_Enbyte(): had
	    {   ...
		if (OBJ_TYPE(*rat) == OBJ_TYPE_OBJ)
 		&& !OBJ_IS_CLASS_PRX(*rat)) {
		....
		} else {
	where
	    if (OBJ_TYPE(*rat) == OBJ_TYPE_OBJ) {
		...
		if (!OBJ_IS_CLASS_PRX(*rat)) {
		....
		} else {
	was needed.	

Fri Feb 14 03:16:52 1997    <cynbe@muq.org>

	*  (muqnet): Whee!  Just bounced first request (req-nexus)
	off a remote oldmud world via muqnet. :)  *yawn*...

Sun Jan 26 21:08:51 1997    <cynbe@muq.org>

	* obj.t: Muq comparison operators hacked to compare
	proxy objects by contents rather than dbref, since
	this is a lot closer to what one usually wants.

	* job.t: |maybe-write-stream-packet implementation has been hacked
	to call muqnet:maybe-write-stream-packet if it exists and
	is a compiled functio and the "stream" argument is in fact
 	a proxy.  A first step toward inserver support for transparent
	networking.

Mon Jan 20 01:22:30 1997    <cynbe@muq.org>

	* skt.t: After various bits of thrashing which included
	writing muq/c/Pipetest.c and muq/c/Socktest.c, finally
	tracked the poor muq/pkg/Check/xx-muqnet2.muf round-trip
	packet performance (0.3 seconds for a round trip) to skt.t
	code which was busy-waiting by doing infinite numbers of
	reads of zero bytes from the input muf file.  This problem
	was even documented in the source *blush*.  Applied a fix,
	which dropped round-trip time to 0.04 seconds, which I think
	is acceptable.  It's almost 100x slower than Socktest still,
	but Muq -is- a bytecoded interpreter, not a dedicated C hack...

Sun Jan 19 22:26:38 1997    <cynbe@muq.org>

	* muq.t: Added properties
	   /muq%s/blocking-select-calls-made
	   /muq%s/nonblocking-select-calls-made
	   /muq%s/select-calls-interrupted
	mostly to help with debugging.

Tue Jan  7 09:54:48 1997  Cynbe ru Taren  <cynbe@donna.actlab.utexas.edu>

	* skt.t: Added properties
	    skt%s/last-error
	    skt%s/last-errno
	    skt%s/error-count
	to help in diagnosing network I/O errors &tc.

Sun Jan  5 21:55:23 1997  Cynbe ru Taren  <cynbe@donna.actlab.utexas.edu>

	* Hrm: Looks like Linux 1.2.13 can only context-switch about
	six times per second, hence round-trip time is 0.3 seconds
 	independent of number of users/jobs until we hit about 100
	simultaneous jobs:
                               Total    Absolute     Amortized
      Round  Expected Actual   Elapsed  Roundtrip    Roundtrip  Packets
Jobs  trips  Replies  Replies  Seconds  Time         Time       Resent
----  -----  -------  -------  -------  -----------  ---------- ------
   1     30       30       30  7.3477    0.24492      0.24492        0
   2     30       60       60  9.157     0.30523      0.15261        0
   4     30      120      117  9.2268    0.30756      0.078861       0
   8     30      240      241  9.2107    0.30702      0.038218       0
  16     30      480      480  9.2461    0.3082       0.019262       0
  32     30      960      960  10.062    0.3354       0.010481       0
  64     30     1920     1920  11.301    0.37669      0.0058858      0
 128     30     3840     3815  21.725    0.72417      0.0056946      1
 256     30     7680     7699  44.302    1.4767       0.0057541     22

	Oddly, every now and then we get an anamolously low runtime --
	note the sub 3-second runs below:
	
                               Total    Absolute     Amortized
      Round  Expected Actual   Elapsed  Roundtrip    Roundtrip  Packets
Jobs  trips  Replies  Replies  Seconds  Time         Time       Resent
----  -----  -------  -------  -------  -----------  ---------- ------
   1     30       30       30  9.636     0.3212       0.3212         0
   2     30       60       60  3.0961    0.1032       0.0516         0
   4     30      120      120  2.8372    0.094574     0.023643       0
   8     30      240      240  2.8241    0.094135     0.011767       0
  16     30      480      480  9.5811    0.31937      0.01996        0
  32     30      960      960  9.9585    0.33195      0.010373       0
  64     30     1920     1920  11.075    0.36916      0.0057681      0
 128     30     3840     3820  21.917    0.73058      0.005736       0
 256     30     7680     7694  40.793    1.3597       0.0053018     39	

	For comparison, here is the same test run entirely within one
	Muq server, eliminating the Linux 1.2.13 overhead associated
	with unix-level context switching (but not the Linux overhead
	associated with the loopback device):

                               Total    Absolute     Amortized
      Round  Expected Actual   Elapsed  Roundtrip    Roundtrip  Packets
Jobs  trips  Replies  Replies  Seconds  Time         Time       Resent
----  -----  -------  -------  -------  -----------  ---------- ------
   1     30       30       30  1.0131   0.033769     0.033769        0
   2     30       60       60  1.5439   0.051462     0.025731        0
   4     30      120      120  1.1268   0.03756      0.0093901       0
   8     30      240      240  2.7247   0.090822     0.011353        0
  16     30      480      480  4.1749   0.13916      0.0086977       0
  32     30      960      960  8.2632   0.27544      0.0086074       0
  64     30     1920     1920  15.979   0.53264      0.0083225       0
 128     30     3840     3834  32.128   1.0709       0.0083797       4
 256     30     7680     7680  64.936   2.1645       0.008455       50

	During both of the above, 'top' shows about 80% user CPU,
	20% system CPU, which doesn't make much sense to me unless
	Linux counts context switch time under "user"...
	
	
Sat Jan  4 23:13:26 1997  Cynbe ru Taren  <cynbe@donna.actlab.utexas.edu>

	* Historic Moment :) -- Muqnet sends its first round-trip
	PING between two servers.  (First communication between two
	separate Muq servers, I believe.)

Sat Jan  4 01:39:40 1997  Cynbe ru Taren  <cynbe@donna.actlab.utexas.edu>

	* skt.t: skt_write_udp_message_streams():  Fixed a bug in the
	code filtering out nonprinting chars from incoming UDP packets
	when socket%s/pass-nonprinting-from-net is set to NIL.

	* Added "make check" support for simultaneous pairs of servers
	(muq/pkg/Check/x[xy]-*muf filepairs), to help test distributed
	applications and support, such as muqnet.
	
Fri Jan  3 18:15:27 1997  Cynbe ru Taren  <cynbe@donna.actlab.utexas.edu>

	* sym.t: sym_sprintX():  Added a teeny hack so NIL and T always
	print as such -- got tired of seeing "lisp:nil" and "lisp:t".

Thu Jan  2 11:31:01 1997  Cynbe ru Taren  <cynbe@donna.actlab.utexas.edu>

	* jobbuild.t: Added prims
	    |enbyte
	    |debyte
	to convert a block of values to/from pure-byte
	format suitable for network transmission.

	* sys.t: Added properties
	    /sys%s/host-name
	    /sys%s/dns-name
	    /sys%s/dns-address
	    /sys%s/ip0
	    /sys%s/ip1
	    /sys%s/ip2
	    /sys%s/ip3
	    /sys%s/muq-port
	to publish the name and address of the host system.
	The %s/muq-port property really belongs on /muq rather
	than /sys, but is likely to be used in conjunctions with
	ip[0-3] so often, I thought it better to put them on the
	same object.
	
Tue Dec 31 15:34:05 1996  Cynbe ru Taren  <cynbe@donna.actlab.utexas.edu>

	* jobc.t: Added a prim
	    ]make-proxy
	and started implementing the proxy class (prx.t).

Mon Dec 30 18:18:42 1996  Cynbe ru Taren  <cynbe@donna.actlab.utexas.edu>

	* jobbuild.t: Added prims
	    dbref-to-ints3
	    ints3-to-dbref
	to convert dbrefs to and from an exportable
	integer format.  This is primarily to support
	distributed applications which need to exchange
	dbrefs between Muq servers.  Hope this doesn't
	turn into an intractable security hole :(.

Sat Dec 21 22:55:52 1996    <cynbe@muq.org>

	* muq.t: Added properties
	    %s/secs-for-last-backup
	    %s/secs-for-last-garbage-collect
	which report duration times for backups and gcs.
	
	* key.t: Added %s/abstract property to distinguish
	abstract classes -- those which may not be instantiated.

Fri Dec 20 22:23:14 1996    <cynbe@muq.org>

	* -1.38.0 release.

Wed Dec 18 23:27:18 1996    <cynbe@muq.org>

	* obj.t: Added code to create /etc/rc2-d for
	daemon-mode startup.

	* z-muq.t: Started implementation of -d switch.

Mon Dec 16 01:31:32 1996    <cynbe@muq.org>

	* vm.t: Hacked db_nuke() to handle db
	files which have been gzipped, also.

	* muq.t: Added
	    /muq%s/logarithmic-backups
	flag to allow in-db selection between sequential
	and logarithmic backup strategies.

	* vm.t: Implemented logarithmic backup sequncing
	as an alternative to sequential accumulation of
	backups.

	* vm.t: Increased default
	    VM_MAX_DB_COPIES_TO_KEEP
	value from 2 to 25.  Better too many than too few!
	And disk space is getting cheaper.
	
Sun Dec 15 22:06:20 1996    <cynbe@muq.org>

	* vm.t: Added
	    vm_Backups_Done
	to list of values saved in db header.

	* job.t: Added support for periodic backups to
	job_Is_Idle, similar to existing periodic
	garbage collection support.

	* muq.t: Added new properties
	    /muq%s/date-of-next-backup
	    /muq%s/secs-between-backups
	as part of support for in-db triggered backups.

Sun Dec 15 11:09:53 1996    <cynbe@muq.org>

	* muq.t: Added new property
	    /muq%s/date-of-last-backup
	as part of support for in-db triggered backups.

	* obj.t: Added obj_Do_Backup() as support for
	in-db triggered backups.

	* jobbuild.t: Added new prim
	    root-do-backup
	to allow triggering of a monolithic db backup
	from in-db.

	* muq.t: Added new properties
	    /muq%s/blocks-recovered-in-last-garbage-collect
	    /muq%s/bytes-recovered-in-last-garbage-collect
	    /muq%s/date-of-last-garbage-collect
	to make garbage collector more visible in-db.

	* muq.t: Renamed
	    *garbage-collection*
	to
	    *garbage-collect*
	everywhere, just to make it a bit less verbose.
	Anyone got a one-syllable synonym? *wistfulgrin*

Sun Dec 15 00:12:36 1996    <cynbe@muq.org>

	* muq.t: Added property
	    /muq%s/garbage-collects
	counting garbage collections done in
	obj.t module, mostly for debugging
	purposes.

Sat Dec 14 22:30:16 1996    <cynbe@muq.org>

	* muq.t: Added property
	    /muq%s/select-calls-made
	counting select()s done in skt.t module.
	Mostly for debugging, to see if it grows
	unreasonably quickly.

	* jobbuild.t: Introduced new prim
	    switch-job
	which reliquishes control of the virtual machine
	without actually going to a sleep queue or such.

Sun Dec  8 13:56:43 1996    <cynbe@muq.org>

	* usr.t: Added a WWW property for user homepages.

Sun Dec  8 00:38:59 1996    <cynbe@muq.org>

	* jobb.t: Bugfix: job_P_Char_Position_In_Block()
	(the |char-position prim) had an off-by-one bug
	resulting in matches on the first char being
	missed, and otherwise in the returned offset one
 	too small.
	   Also extended the prim to work on blocks of
	chars as well as blocks of integers.
	
Sat Dec  7 21:11:55 1996    <cynbe@muq.org>

	* jobbuild.t: Added
 	   |popp
 	   |shiftp
	prims:  Got sick of typing
	   |pop pop
	   |shift pop
	to discard something.

Mon Dec  2 00:04:17 1996    <cynbe@muq.org>

	* Improved error diagnostic issued by accept() on
	fatal errors.

	* Added ECONNRESET to list of legitimately possible
	errors which accept() should ignore rather than issue
	a fatal error on.  Thanks to Andrew Bolt
 	<Andrew.Bolt@ait.co.uk> for tracking that one down!

	* Changed 'recieve' -> 'receive' various places.
	Another nod to Andrew Bolt <Andrew.Bolt@ait.co.uk> :)

Thu Nov 28 00:20:58 1996    <cynbe@muq.org>

	* -1.37.0 release.

Fri Nov 22 01:42:52 1996    <cynbe@muq.org>

	* jobbuild.t: copy_tmpfile_to_output() had a
	redundant fclose() that was crashing us under
	the latest Linux libraries.  Thanks to
	   Stephen Halloran <dpair@netro.com.au> and
	   Matthew Branton <paradox@pipeline.com>
	for reporting and tracking down this one!

Mon Nov 18 01:53:27 1996    <cynbe@muq.org>

	* -1.36.0 release.

Sun Nov 17 19:17:35 1996    <cynbe@muq.org>

	* usr.t: Hardwired the
	    usr%a/encrypted-password
	property, just to save a little db space.

Sun Nov 17 00:44:14 1996    <cynbe@muq.org>

	* -1.35.0 release.

Sat Nov 16 13:56:40 1996    <cynbe@muq.org>

	* usr.t: Added property
	    %s/config-fns
	by way of providing a standard place for user-specific
	configuration options to be stored.  See also
	10-C-utils.t:add-config-fn and config.

	* usr.t: Added property
	    %s/login-hints
	by way of providing a standard place for user-specific
	messages to be displayed at login.  See also
	10-C-utils.t:show-login-hints and add-login-hint.

Fri Nov 15 23:40:49 1996    <cynbe@muq.org>

	* skt.t: Andrew Bolt pointed out that Muq was
	taking over the CPU when it was idle.  Experimented
	and managed to reproduce this by connecting to the
	nanomud and then disconnecting: CPU usage went through
	the roof after the disconnect.  Traced this to
	skt_usually_start_closing_socket() having
	    if (b->skt_state != SKT_OPEN) {
		return;
	    }
	where it needed
	    if (b->skt_state != SKT_OPEN) {
		if (b->skt_state == SKT_WAITING_TO_READ_EOF) {
		    b->skt_state  = SKT_DRAINING_INPUT;
		}
		return;
	    }
	to properly implement the documented state transition
	diagram: This fixes the problem as reproduced.
	

Sun Nov 10 20:50:29 1996    <cynbe@muq.org>

	* job.t: Added a prim
	    ]push
	for adding a block of values to a stack object.

Fri Nov  8 22:05:43 1996    <cynbe@muq.org>

	* Added default prototypes for:
	    connect
	    getsockname
	    pclose
	    recvfrom
	    sendto
	Thanks to Wyatt for reporting that SunOS lacks these!
	(Actually, connect() was supposed to be handled already,
	but I omitted the acconfig.h entry for it last time.)

Wed Nov  6 23:02:31 1996    <cynbe@muq.org>

	* mss.t: Changed mss_Read() to respect q->column,
	meaning that read-line no longer returns chars
	alread read using scan-* calls.

Sat Nov  2 01:57:59 1996    <cynbe@muq.org>

	* -1.34.0 release.

	* job.t: Fixed get-stackframe[ code for
	ephemeral vectors and structs/objects.
	Added some muq/pkg/Check/x-dbug regression
	test code for them.

Fri Nov  1 02:16:47 1996    <cynbe@muq.org>

	* jobbuild.t: GET-STACKFRAME[ arity was misdeclared
	as { $ -> [] } instead of { $ $ -> [] } ... prolly
	added an arg and forgot to update jobbuild.t.

Sun Oct 20 20:59:37 1996    <cynbe@muq.org>

	* -1.33.0 release, mostly to see if it fixes
	Wyatt's latest portability bug report.

Sun Oct 20 00:55:39 1996    <cynbe@muq.org>

	* vm.t: Wyatt reports that SunOS 4.1.3 just plain
	doesn't have strerror().  Thpt.  Added a check
	to Configure.in producing a HAVE_STRERROR #define
	in h/Config.h, and made all uses of strerror()
	conditional upon it.
	
Wed Oct 16 00:06:29 1996    <cynbe@muq.org>

	* -1.32.0 release

	* Added default prototype for 'strcasecmp' to autoconfig
	system, to fix below Unixware compile warning.

	* job.t:  Hacked job.t into five parts
	    job.t
	    joba.t
	    jobb.t
	    jobc.t
	    jobe.t
	in the hope of resolving the following Muq -1.31.0
	portability bug, reported by Andrew Bolt <Andrew.Bolt@ait.co.uk>,
	which suggests job.t, at 849K in length, was overstressing
	the Unixware assembler;

	    The OS is:

	    UnixWare 2.01
	    Copyright 1984-1995 Novell, Inc.  All Rights Reserved.
	    Copyright 1987, 1988 Microsoft Corp.  All Rights Reserved.
	    U.S. Pat. No. 5,349,642


	    The problem is:

	    /home/ABolt/muq/bin/Muq-detexify <job.t >job.c
	    gcc -Wall -Wno-parentheses -Wno-comment -c  -g -O 
	    -I/home/ABolt/muq/h  job.c
	    job.c: In function `job_P_Good_Password_P':
	    job.c:18763: warning: implicit declaration of function 
	    `strcasecmp'
	    [- Very long pause here -]
	    UX:as: ERROR: (EOF):cannot allocate 40000 bytes: Insufficient 
	    or invalid memory
	    UX:as: ERROR: (EOF):cannot recover from previous error
	    make[1]: *** [job.o] Error 1
	    make[1]: Leaving directory `/home/ABolt/muq/c'
	    make: *** [all] Error 2

	    For what it's worth:

	    $ ulimit -a
	    time(seconds)        unlimited
	    file(blocks)         2097152
	    data(kbytes)         16384
	    stack(kbytes)        16384
	    coredump(blocks)     32768
	    nofiles(descriptors) 64
	    vmemory(kbytes)      32768



Sun Oct 13 00:00:40 1996    <cynbe@muq.org>

INCOMPATIBLE CHANGES:
	* job.t: Eliminated the encrypt-password function,
	and converted 'crypt' prim to accept a block of
	chars instead of two strings.  This has the
	advantage of not forcing us to generate a
	garbage string when checking password, and of
	not requiring the odd hack of nulling out the
	plain-text password string for security -- we
	simply overwrite the stackblock, which is much
	more natural.

	* job.t: Removed good-password? prim because,
	while the function is a good idea, there is
	no particular need to implement it in-server.

Sun Oct  6 12:42:30 1996    <cynbe@muq.org>

	* obj.t: Fixed: obj_Neql wasn't including OBJ_TYPE_STRUCT
	in its switch(){}, crashing interpreter when structs
	were compared for equality or such.

Sat Oct  5 13:22:39 1996    <cynbe@muq.org>

	* Default methods seem to be working, which
	makes the Muq Object System as a whole now
	minimally usable.

	* Renamed muq/muf to muq/pkg, since it will soon
	be multilingual.

Tue Oct  1 00:55:46 1996    <cynbe@muq.org>

	* jobbuild.t: Added more mos-key prims:
	    get-mos-key-metharg
	    set-mos-key-metharg
	    get-mos-key-slotarg
	    set-mos-key-slotarg


Sun Sep 29 23:24:03 1996    <cynbe@muq.org>

	*  Added some convenience operators to muf compiler:

	    ]-->	# Same as:    ]shift -->
	    ]->		# Same as:    ]shift ->

	These mostly help the MUF programmer deal with
	lisp-oriented functions, which always return a
	block rather than a naked value.

	* First successful make-instance call:

	    cynbe@eith muq/c> ./muq
	    root: 
	    defclass: xx ;
	    root: 
	    [ 'xx | make-instance
	    make-instance/symbol called!
	    make-instance/standard-class called!
	    root: [ #<a xx> |

	Does life get any better than that? :)
	
	
Sat Sep 28 22:11:57 1996    <cynbe@muq.org>

	* Hrm... I think this email represents -some- sort
	of milestone worth logging:

	    From muq@armadillo.net  Sat Sep 28 00:35:13 1996
	    Subject: hello God
	    To: cynbe
	    Cc: captain@forest.armadillo.net (Bran Muffin)

	    on Sat Sep 28 02:34:13 CDT 1996 muq becomes self aware and 
	    seeks out the Creator.

	    boo!  :-)

	    -=> muq

	:)

	
Mon Sep 23 01:38:52 1996    <cynbe@muq.org>

	* job.t: Added
	    ]pop-nth
	    ]shift
	prims:  Got tired of doing |dup-nth -> x ]pop x

Sun Sep 22 19:09:01 1996    <cynbe@muq.org>

	* Got MUF lambda-list syntax, such as in
	    : x {[ 'a ; 'b 0 ; :c 13 ]} a b c + + ;
	working -- that is, optional and keyword arguments.
	That's a major milestone and tool!  :)
	
Fri Sep 20 23:19:01 1996    <cynbe@muq.org>

	* Have is_a slots added to essentially all Muq
	types allocated in ram. (I.e., not ints, floats,
	short strings, or ephemeral cons cells.)  This
	should provide lots of room for future expansion
	of the MOS object system to native types.

	* Can now add a method to a superclass with
	existing subclasses and instances thereof, and
	have the latter updated correctly and transparently.
	That was a bit of a grind to get working...
	
Sat Sep 14 19:56:49 1996    <cynbe@muq.org>

	* gfg.t: Destroyed.  (Wound up not needing it.)

Sun Sep  8 22:59:00 1996    <cynbe@muq.org>

	* Added a
	    omnipotent?
	prim to test state of omnipotent flag.

	* Introduced
	    defclass: axe :is-a 'tool ;
	as a more readable syntax for
	    [ 'axe :is-a 'tool | ]defclass
	which is also more consistent with the
	    defgeneric: wave { $ -> } ;
	and
	    defmethod: wave { 'tool } ... ;
	syntaxes.  Also added
	    defstruct: abc ... ;
	for similar reasons.
	
Sat Sep  7 19:49:56 1996    <cynbe@muq.org>

	* job.t: Added
	    mos-key-unshared-slots-match?
	prim for efficiently comparing mos-key instances. Also
	    link-mos-key-to-ancestor
	    unlink-mos-key-from-ancestor
	prims.
	
Mon Sep  2 15:27:35 1996    <cynbe@muq.org>

	* jobbuild.t: Renamed:
	    get-key -> get-mos-key
	    find-structure-slot -> find-mos-key-slot
	    get-structure-slot-property -> get-mos-key-slot-property
	    set-structure-slot-property -> set-mos-key-slot-property
	
	* jobbuild.t: Removed:
	    pop-ephemeral-object	    (Use pop-emphemeral-struct)
	    JOB_STACKFRAME_EPHEMERAL_OBJECT (Use ..._STRUCT)
	    ]make-mos-object		    (Use ]make-structure)
	    get-mos-object-slot		    (Use get-structure-slot)
	    set-mos-object-slot		    (Use set-structure-slot)
	    copy-mos-object		    (Use copy-structure)

	* Passes regression suite again after struct/mos-object
	subpport merge.  (FINALLY!!)

Sat Aug 31 13:12:07 1996    <cynbe@muq.org>

	* jobbuild.t: Added copy-mos-key-slot prim.

	* jobbuild.t: Nuked make-structure-definition prim,
	as part of merging the struct and object machinery.

Mon Aug 26 20:13:13 1996    <cynbe@muq.org>

	* Renamed "guts" to "key" everywhere, as being
	clearer, shorter -- and less gruesome :)

Sat Aug 24 22:52:32 1996    <cynbe@muq.org>

	* jobbuild.t: Added a return argument to
	methods-match? specifying their sort order.

Fri Aug 23 22:38:00 1996    <cynbe@muq.org>

	*  (root): First successful MOS generic method invocation:

	    cynbe@eith muq/c> ./muq
	    root: 
	    defgeneric: abc { $ -> $ } ;
	    root: 
	    [ 'g-class | ]defclass
	    root: 
	    defmethod: abc { 'g-class } pop 12 ;
	    root: 
	    [ | 'g-class ]make-mos-object --> obja
	    root: 
	    obja abc
	    root: 12

	WHEE!! :) :)
	

Tue Aug 20 23:10:19 1996    <cynbe@muq.org>

	* jobbuild.t: Added prim
	    methods-match?
	which is true if they have the same signatures.

Mon Aug 19 01:41:25 1996    <cynbe@muq.org>

	* skt.t: Splatted a nastybug:  At two points had
	    bytes <<= 1;
	where
	    bytes >>= 1;
	was needed, resulting buffer overflow
	and obscure consequences.

	
Sat Aug 17 20:18:47 1996    <cynbe@muq.org>

	* jobbuild.t: Added
	    control?
	prim.
	
	* jobbuild.t: Renamed
	    get-method-slot-property -> get-method-slot
	    set-method-slot-property -> set-method-slot
	and changed them to get/set all slot values at
	once instead of one at a time -- seems to be
	more efficient and convenient in practice.

Thu Aug 15 21:39:24 1996    <cynbe@muq.org>

	* jobbuild.t: Added
	    current-compiled-function
	    get-mos-guts-ancestor?
	prims.
	

Wed Aug 14 20:42:08 1996    <cynbe@muq.org>

	* jobbuild.t: Added
	    dup[
	    |applicable-method?
	prims. And bought "Texturing and Modeling" :) ;) :)
	

Sat Aug 10 20:14:06 1996    <cynbe@muq.org>

	* jobbuild.t: Added more mos-guts prims:
	    delete-mos-guts-class-method
	    delete-mos-guts-object-method
	    insert-mos-guts-class-method
	    insert-mos-guts-object-method
	    find-mos-guts-class-method
	    find-mos-guts-object-method
	
Thu Aug  8 20:41:48 1996    <cynbe@muq.org>

	* jobbuild.t: Added more mos-guts (nee' clos-guts) prims
	    get-mos-guts-object-method
	    set-mos-guts-object-method
	    get-mos-guts-class-method
	    set-mos-guts-class-method
	after realizing that storing methods in class
	of first argument, rather than in generic function,
	would resolve some protection problems relating to
	users extending generic functions they didn't
	create, and also perhaps scale more nicely.
	
	* muf.t: Added |for-pairs key val do{ ... }
	to both bootstrap and production muf compilers.

Mon Aug  5 20:30:09 1996    <cynbe@muq.org>

	* Changed almost all references to CLOS (CommonLisp
	Object System) to MOS (Muq Object System), because
	the two are never going to be -quite- the same (if
	only because MOS has multi-user support CLOS lacks)
	and discussing the differences is likely to be very
	confusing without separate names for them.

Sun Aug  4 09:48:18 1996    <cynbe@muq.org>

	* jobbuild.t: Added |keysvals-uniq prim.

Sat Aug  3 17:28:57 1996    <cynbe@muq.org>

	* jobbuild.t: Added clos-precedence-list[ prim.

Thu Aug  1 18:06:36 1996    <cynbe@muq.org>

	* jobbuild.t: Added |tsort-clos prim.

Tue Jul 30 20:08:02 1996    <cynbe@muq.org>

	* job.t: Added |tsort prim.

Tue Jul 30 01:29:16 1996    <cynbe@muq.org>

	* job.t: Added |pairs-uniq prim.

Tue Jul 30 00:52:25 1996    <cynbe@muq.org>

	* job.t: Added |pairs-sort prim.

Mon Jul 29 23:44:19 1996    <cynbe@muq.org>

	* job.t: Added |abc-abbc prim.

Sun Jul 28 17:20:32 1996    <cynbe@muq.org>

	* jobbuild.t: Increased JOB_OPCODE_BITS from 6 to 7.

Sat Jul 27 16:49:21 1996    <cynbe@muq.org>

	* -1.31.0 release

Wed Jul 24 00:46:44 1996    <cynbe@muq.org>

	* -1.30.0 release (?)
	* -1.29.0 release

	* muf-in-muf compiler passes regression suite for first time :)
	
Tue Jul 23 00:08:29 1996    <cynbe@muq.org>

	* job.t: Dropped unneeded |scan-token-to-chars prim.

Mon Jul 22 17:16:00 1996    <cynbe@muq.org>

	* -1.29.0 release

Sat Jul 20 13:04:41 1996    <cynbe@muq.org>

	* -1.28.0 release

Thu Jul 18 21:55:07 1996    <cynbe@muq.org>

	* muf.t: Fixed bootstrap compiler to allow
	   with-tag muf:abrt do{ ... }
	instead of just
	   with-tag abrt do{ ... }
	as previously.  (This is mostly so shell boilerplates
	can all reference the same muf:abrt symbol.)
	
Sat Jul 13 13:24:32 1996    <cynbe@muq.org>

	* asm.t: Fixed nasty sloppybug introduced during recent
	compiler-support hacking: asm_Call had
	    if (!OBJ_IS_CFN(cfn)) {
		/* Assume compiled-function will */
		/* be slotted in later.  This is */
		/* required when compiling auto- */
		/* recursive functions:          */
	    }
	    asm_unary(
		asm,
		JOB_OP_CALLI,
		constant_note( asm, fn )
	    );
	    return;
	where
	    if (!OBJ_IS_CFN(cfn)) {
		/* Assume compiled-function will */
		/* be slotted in later.  This is */
		/* required when compiling auto- */
		/* recursive functions:          */
		asm_unary(
		    asm,
		    JOB_OP_CALLI,
		    constant_note( asm, fn )
		);
		return;
	    }
	was intended and needed.  Must have gotten interrupted.
	unfortunately, the former code very nearly works :(
	
Tue Jun 25 21:28:48 1996    <cynbe@muq.org>

	* skt.t: Ever so clever: In batch compile mode, skt.t
	skt_usually_start_closing_socket() was setting mode
	to DRAINING_INPUT after reaching EOF on last file.
	This results in closing of the socket after it has
	drained... including the output side.  This hung the
	server when the muf-in-muf compiler tried to write
	diagnostic info to output, filled up the output
	buffer, and stopped waiting for it to empty.
	  For now, just disabled closing of the socket in
	batch mode.  Prolly should rewrite to close input
	and output side separately, one of these days...
	
	
Sat Jun  8 13:05:42 1996    <cynbe@muq.org>

	* jobbuild.t: Added more prims:
	    |upcase
	    |downcase
	
Fri Jun  7 23:32:50 1996    <cynbe@muq.org>

	* job.t: New compiler-support prim:
	    |scan-token-to-chars

Thu Jun  6 01:30:11 1996    <cynbe@muq.org>

	* jobbuild.t: Added |char-position and |bracket-position
	prims to support parsing of path expressions in muf
	compiler.
	
Wed Jun  5 03:49:41 1996    <cynbe@muq.org>

	* jobbuild.t: Added |extract[ prim, which is
	just like |subblock[ prim except it removes
	the subblock from the original block.

Sun Jun  2 03:34:24 1996    <cynbe@muq.org>

	* jobbuild.t: Added |shift and |unshift block
	operators, parallel to |pop and |push but
	working on other end of block.

Wed May 29 23:41:10 1996    <cynbe@muq.org>

	* job.t: Added |do-lisp-backslashes prim: It
	deletes backslashes from a block of chars, 
	converting to a block of ints where quoted
	(backslashed) chars have a high bit set.
	This is a handy convention used by the lisp compiler.

	* job.t: Added a |potential-lisp-number? prim
	as a convenience/speedhack for compiler writers.

Tue May 28 23:36:27 1996    <cynbe@muq.org>

	* job.t: Added |do-c-backslashes prim, just like
	the older expand-c-string-escapes fn except it
	operates on blocks of char instead of strings,
	hence generates less garbage.  We'll prolly phase
	out the expand-c-string-escapes prim...

Mon May 27 13:37:38 1996    <cynbe@muq.org>

	* sdf.t: Added export property, and added
	   :export t
	option to ]defstruct.

	* job.t: Added spare-assembler property.

Sun May 26 22:28:41 1996    <cynbe@muq.org>

INCOMPATIBLE CHANGE:
	* job.t: Split the ":init" slot option to muf
	]defstruct into two slot options, ":initval"
	and ":initform", the difference being that
	initval is a constant while initform is a
	compiled-function which computes the slot
	filler at structure creation time.  initform
	lets you, for example, create a new object to
	fill the slot each time a new structure is
	created, something the old :init didn't support.

Wed May 22 04:58:23 1996    <cynbe@muq.org>

	* job.t: New compiler-support prims working:
	    |unread-token-char
	    |read-token-char
	    |read-token-chars
	    |scan-token-to-char
	    |scan-token-to-char-pair
	    |scan-token-to-whitespace
	    |scan-token-to-nonwhitespace
	
	* mss.t: Token buffer working.

Wed Apr 10 22:02:42 1996    <cynbe@muq.org>

	* jobbuild.t: Added 'bound?' prim predicate to
	determine whether a symbol has a value as a variable.

Sat Mar 30 13:58:17 1996    <cynbe@muq.org>

INCOMPATIBLE CHANGE:
	* job.t: 'intern' prim now searches only current
	package and packages 'used' by it.  (It used to
	also always search the 'muf' package, whether or
	not it was 'used'.)

Sat Mar 23 00:12:50 1996    <cynbe@muq.org>

	* job.t: Added prims
	    |read-lisp-comment
	    |read-lisp-string
	in support of lisp reader.
	
	* job.t: Basic lisp reader seems to be working.

Thu Mar 21 05:26:08 1996    <cynbe@muq.org>

	* Renamed all #README# files to %README%
	This avoids annoying confusion with temp files
	created by emacs &tc while still sorting at
	the top of the directory listing and avoiding
	use of common wildcard characters.

	* jobbuild.t: Added prims
	    get-macro-character
	    set-macro-character
	per CommonLisp spec.
	
	* muf.t: Added
	    parameter:
	pseudo-op to bootstrap MUF compiler.

Tue Mar 19 07:28:17 1996    <cynbe@muq.org>

	* job.t: Changed |int-char to take only bottom 8
	bits of int:  This way, it strips QUOTED bits left
	by |read-lisp-chars.

Sun Mar 17 07:04:27 1996    <cynbe@muq.org>

	* skt.t: Added some props to allow tweaking
	timeout values from the MUF level:
	    %S/outdrain-seconds
	    %S/eofwait-seconds 
	    %S/hupwait-seconds 
	    %S/killwait-seconds
	    %S/indrain-seconds 

Sat Mar 16 23:00:56 1996    <cynbe@muq.org>

	* skt.t (SKT_INDRAIN_SECS): Increased this (and the
	other SKT_*_SECS constants) from 30 to 600 seconds,
	because during "make torturetest", doing a garbage
	collection was taking more than 30 seconds, leading
	to failure of the test.  (Tracking -that- down took
	three days :(. )  This is bug fallout from mid-Dec
	addition of timeout logic in support of popen() stuff.

Sun Mar 10 03:22:57 1996    <cynbe@muq.org>

	* jobbuild.t: Added ]set-local-vars prim.

	* cdt.t: Fixed: validate_condition_dir() was placing
	both parents in slot 0 of parent vec, instead of one
	in slot 0 and one in slot 1.

Sat Mar  9 20:01:31 1996    <cynbe@muq.org>

	* job.t: Added |apply-lambda-list prim to parse
	a lisp-style parameter block, filling in default
	arguments and such.

	* muf.t: Added |read function: Lisp reader support

Fri Mar  8 23:00:55 1996    <cynbe@muq.org>

	* job.t: Added property:
	   %S/readtable
	to hold lisp readtable.
	
	* rdt.t: Created.  (Lisp readtables.)

INCOMPATIBLE CHANGE:
	* asm.t: Renamed the
 	   %S/thunk-promise
	field to
 	   %S/flavor
	and changed the values from
	   NIL  (normal fn)
	   'p'  (promise)
	   't'  (thunk)
	to
	   NIL           (normal fn)
	   :promise      (promise)
	   :thunk        (thunk)
	   :clos-generic (CLOS generic function)
	This shouldn't break anything except possibly
	Pakrat's assembler if he's progressed to assembling
	thunks and promises (as far as I know, he hasn't).
	The change is both in the interests of intelligibility
	and of support for the CommonLisp Object System.
	
Sun Mar  3 19:27:50 1996    <cynbe@muq.org>

	* jobbuild.t: Added some prims:
	    make-lambda-list
	    make-method
	    get-lambda-slot-property
	    set-lambda-slot-property
	    get-method-slot-property
	    set-method-slot-property
	    lambda-list?
	    method?
	    is-a-lambda-list
	    is-a-method
	
	* gfg.t: Created.  (CLOS generic function guts.)

	* lbd.t: Created.  (CLOS lambda-lists.)

	* mtd.t: Created.  (CLOS methods.)

Thu Feb 29 05:25:16 1996    <cynbe@muq.org>

	* jobbuild.t: Added more clos-guts prims:
	    get-clos-guts-initarg
	    set-clos-guts-initarg

Sun Feb 25 06:13:22 1996    <cynbe@muq.org>

	* jobbuild.t: Added more clos-guts prims:
	    get-clos-guts-parent
	    set-clos-guts-parent
	    get-clos-guts-ancestor
	    set-clos-guts-ancestor

Sat Feb 24 06:54:57 1996    <cynbe@muq.org>

	* jobbuild.t: Split CLOS classes into two parts,
	the class proper and the guts, which contain the
	variable-length stuff.  This lets us add slots
	while keeping the same class object, as required
	by the ANSI standard.  Added prims:
	    make-clos-guts
	    clos-guts?
	    is-a-clos-guts
	Renamed prims:
	    find-clos-class-slot -> find-clos-guts-slot
	    get-clos-class-slot-property -> get-clos-guts-slot-property
	    set-clos-class-slot-property -> set-clos-guts-slot-property
	
	
INCOMPATIBLE CHANGE:
	* Renamed the structure slot property
 	    :INITIALIZER
	to
 	    :INITFORM
	This makes our struct nomenclature consistent
	with the ANSI CommonLisp-specified CLOS object
	nomenclature.

	
Fri Feb 23 07:58:44 1996    <cynbe@muq.org>

	* clo.t: Created.

	* Sketched in low-level support for CLOS (Common Lisp Object System):
	    copy-clos-object
	    make-clos-class
	    ]make-clos-object
	    find-clos-class-slot
	    get-clos-object-slot
	    set-clos-object-slot
	    get-clos-class-slot-property
	    set-clos-class-slot-property
	    clos-class?
	    is-a-clos-class
	    clos-object?
	    is-a-clos-object
	    this-clos-class?
	    is-this-clos-class

Thu Feb 22 07:21:26 1996    <cynbe@muq.org>

	* X stuff, wormholes moved to attic.
	
Mon Jan 22 01:55:00 1996  Jeff Prothero  <cynbe@muq.org>

	* Selftests clean again after exec -> ]exec change :).
	Final bug was an assumption that bottom frame on loop-
	stack stays 6 slots long just because it starts 6 slots
	long.  Not true!

Sun Jan 21 19:25:04 1996  Jeff Prothero  <cynbe@muq.org>

	* z-muq.t read_eval_print_loop():  Had to change
        to push an empty stackblock on stack at startup,
	since shells now expect to find a stackblock on
	stack when they start up.

Wed Jan 17 21:33:57 1996  Jeff Prothero  <cynbe@muq.org>

INCOMPATIBLE CHANGE:
	* job.t: Changed 'exec' to ']exec' because, just as
	in unix, it can be handy to pass arguments to a
	fn when exec'ing it.  This means all coding doing
	an 'exec' needs to be changed to be given a null
	block, and perhaps to discard that block.  It
	doesn't seem worth having both 'exec' and ']exec'
	in the virtual machine just for backward compatibility,
	given how seldom they are used by most coders.
	(Whee -- back from winter-solstice vacation!)

Sun Dec 24 10:57:30 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.27.0 release

Sun Dec 10 23:42:20 1995  Jeff Prothero  <cynbe@muq.org>

	* Muq passes regression suite again.  Whew! :)

	* skt.t: Heh: I'd been thinking shutdown() was only an
	advisory that affected what the subsequent close() did.
	Not so!  Fixed skt.t to use shutdown() by itself.

	* skt.t: Wrote up the skt_state Transition Diagram,
	then ran around making lots of little hacks implementing
	it.  In end-user terms, this means skt.t has been rehacked
	so data bound both in and out gets flushed and processed
	decently during the socket shutdown process, with timeouts
	and arranged retreats to SIGHUP and SIGKILL for obstreperous
	unix subprocesses which won't take a polite EOF hint.

Sun Dec 10 14:19:35 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Added property
	    skt%S/kill-standard-output-on-exit
	parallel to previous
	    job%S/kill-standard-output-on-exit
	which is intended to provide a simple, natural way
	to complete processing on a socket message stream
	before closing it down.

Sat Dec  9 12:30:57 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Renamed b->closed to b->skt_state, since it has
	already grown from a two-state flag to a five-state one.

Sat Dec  2 20:21:23 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Split job_P_Exec() into halves, the second
	job_finish_exec() half being invoked by throw() after
	any pending after{}always-do{} clauses have been
	executed.  (I goofed badly implementing	'exec', first
	time around!)  This appears to resolve a server-crashing
	bug discovered and reported by Pakrat.

	* jobbuild.t: Added JOB_STACKFRAME_EXEC parallel
	to JOB_STACKFRAME_ENDJOB.

	* job.t: Fixed: job_P_Exec() was resetting loop stack by doing
	    jS.l = jS.l_bot;
	which sets it to completely empty, but this is different
	from job.t:for_new(), which sets a new job to have some
	dummy entries at the bottom.  Changed job_P_Exec() to
	leave the dummy entries in place.
	   Also added a hack to preserve the dummy bottom-of-stack
	x_obj and pc values in an EXEC despite job_call2()s efforts
	to save the old values.

Mon Nov 27 21:46:34 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Pakrat pointed out the ]listen-on-socket error
	messages still used the old listen-for-sockets name. *blush* Fixed!

Sat Nov 25 23:18:48 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added property
	    job%S/kill-standard-output-on-exit
	which is intended to simplify construction of
	unixy job pipelines.

Sat Nov 11 15:13:19 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Added three props to record shutdown info:
	    socket%S/closed-by   ( NIL or :close :exit or :signal )
	    socket%S/exit-status ( NIL or an integer              )
	    socket%S/last-signal ( NIL or an integer              )

	* Mildly historic moment: Muq's first fork()+exec()
	    cynbe@eith muq/c> ./muq
	    root:
	    make-socket --> s    @%s/standard-input --> s%s/standard-output
	    root: 
	    [ :socket s :commandline "test|" | ]popen-socket
	    pipe_into_child is 'FALSE'
	    pipe_from_child is 'TRUE'
	    c c= 't'
	    c c= 'e'
	    c c= 's'
	    c c= 't'
	    Full path is '/usr/local/jsp/muq/srv/test'
	    Test starting up...
	    Loop 0...
	    Loop 0...
	    Bus error (core dumped)
	    cynbe@eith muq/c> Loop 1...
	    Loop 1...
	Just about what one expects for the first try :)


Sat Nov 11 00:56:22 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Added a
	    socket%S/that-pid
	property to hold the pid of an associated host
	process, if any.  

	* skt.t: Added :popen as a possible value for
	    socket%S/type


Fri Nov 10 23:35:22 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added
	    ]popen-socket
	prim rather than overload ]open-socket with its functionality.

Fri Nov 10 02:45:25 1995  Jeff Prothero  <cynbe@muq.org>

	* muq.t: Added /muq%S/srvdir prop giving current srvdir setting.

	* z-muq.t: Added --srvdir=$HOME/muq/srv commandline switch.

	* job.t: Added a prim
	    unbind-symbol
	to reset a symbol to unbound state.  I just
	couldn't bring myself to call it "makunbound"
	in MUF, as CommonLisp does.  Sorry! :)

	* sym.t: Changed system-get-next-key? prim to
	not return :value on unbound symbols:  This keeps
	lss (say) from crashing trying to list the value
	of an unbound symbol.

	* sym.t: Symbols used to have a default value
	of NIL.  Changed them to be *unbound* by default,
	meaning that trying to access the value of a symbol
	which hasn't been set will signal an error.  This
	brings us closer to the CommonLisp standard, and
	also makes some kinds of programming errors easier
	to track down.

	* muf.t: Fixed: We were crashing on
	    '\/
	

Thu Nov  9 18:12:01 1995  Jeff Prothero  <cynbe@muq.org>

INCOMPATIBLE CHANGE:
	* job.t: Changed following prims:
	    get
	    admins-get
	    hidden-get
	    method-get
	    system-get
	They all now signal an error instead of returning
	NIL when asked to fetch the value of a non-existent
	property of an object.
          Since path expressions compile into these operators,
	this also affects paths.
	  Rationale:  Having path expressions (in particular)
	gaily return NIL for missing properties and letting
	computation continue has been masking lots of in-db
	bugs and making debugging and understanding in-db
	code needlessly difficult.  Also, CommonLisp requires
	than access to an unbound variable slot be an error,
	and this is clearly closer to that in spirit.
	This means that code like
	    ~%s/lib<"muf"><"fork-jobset"> not if
	which tests for a possibly absent prop needs to change to
	    ~%s/lib<"muf"> "fork-jobset" get? pop not if
	to avoid triggering an error, and similarly
	    ~/a/b if
	needs to change to something like
	    ~/a :b get? pop if
	if you're really testing for presence/absence.
	

Mon Nov  6 01:45:39 1995  Jeff Prothero  <cynbe@muq.org>

	* lib.t: Added lib_Find_Srv_Directory().

	* Added muq/srv directory, muq/srv/#README# file.

Sun Nov  5 17:29:30 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.26.0 release

Sun Nov  5 00:41:42 1995  Jeff Prothero  <cynbe@muq.org>

	* stg.t: Added support for
            'a' --> string<2>

Sat Nov  4 17:46:21 1995  Jeff Prothero  <cynbe@muq.org>

	* usr.t: Added following property:
	    user%S/telnet-daemon
	to indicate user's preferred telnet daemon;
	This will normally be telnet:start

	* skt.t: Added following property:
	    socket%S/telnet-option-lock
	to allow multiple jobs to twiddle telnet options.

Sat Nov  4 00:03:26 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Added following property:
	    socket%S/discard-netbound-data
	This is in support of the telnet AO (Abort Output) command.

Fri Nov  3 17:29:24 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Added following property:
	    socket%S/telnet-option-handler
	It is intended to hold 256 compiled-function pointers,
	one per telnet option, each one implementing our policy
	on that option.

	* skt.t: Renamed following props in anticipation
	of supporting multiple kinds of out-of-band data
	using the same socket mechanisms:
	    socket%S/telnet-job    -> socket%S/out-of-band-job
	    socket%S/telnet-input  -> socket%S/out-of-band-input
	    socket%S/telnet-output -> socket%S/out-of-band-output

Thu Nov  2 19:12:10 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Added properties
	    socket%S/this-telnet-state
	    socket%S/that-telnet-state
	each a 256-byte string encoding one telnet
	protocol negotiation state per byte.  (See
	07-C-telnet.t)

	* jobbuild.t: Added a
	    make-string
	prim to ease construction of fixed-length strings
	initialized to a fixed value.

Mon Oct 30 22:29:59 1995  Jeff Prothero  <cynbe@muq.org>

	* stk.t stk_Sprint1(): Pakrat pointed out that
	    /lib<"muf"> keys[
	was producing
	    root: Sorry: lib_Sprint: buffer overflow
	which certainly isn't optimal.  Not sure what the
	best solution is, especially within amount of time
	I'm willing to spend on it at moment.
	    For now, changed skt_Print1() to only show
	top 30 items on stack if there are 40 or more.

	* muf.t is_number():  Pakrat pointed out . operator was
	being interpreted as 0.0.  Apparently I loosened the syntax
	to allow both 0. and .0 and overdid it!  That's as bad as
	the Fuzzball release that thought + was 0 ...  Fixed.
	Viva Quebec Canadienne :)

Sun Oct 29 22:52:09 1995  Jeff Prothero  <cynbe@muq.org>

	* Milestone: ;) -- Muq sends first TELNET DONT in response to
	a WILL.

Sun Oct 29 01:06:41 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Nasstybug that slipped through -1.25.0 release testing:
	'read-stream-packet[' (job_P_Read_Stream_Packet())was popping
	its args off the stack before calling job_read_packet(), but
	job_read_packet() can block, meaning that when 
	job_P_Read_Stream_Packet() was restarted after input arriving,
	its arguments would be missing from the stack and it would
	signal a "Needed message stream argument..." error.   Fixed.

	* muf.t do_on(): Fixed: In
		8 -->constant eight   3 case{ on: eight ... }
	the second 'eight' wasn't being recognized as a constant.

	* chr.t chr_sprintX(): Changed a number of lines like
             case '\a':        ...  "'\a'" ...
	to
             case '\a':        ... "'\\a'" ...
	for more intelligible output.  Also changed default
	format for random nonprintables from '%02x' to '\\%03o'
	to better match unix/posix conventions.

	* skt.t: Added a property
	    socket%S/telnet-job
	to point to job doing telnet processing on socket.

Sat Oct 28 01:43:45 1995  Jeff Prothero  <cynbe@muq.org>

INCOMPATIBLE CHANGE:
	* skt.t: Renamed below two socket props:
	    nl-to-crnl-on-output -> nl-to-net-crnl
	    crnl-to-nl-on-input  -> net-crnl-to-nl
	again because I think the new forms less confusing.

	* skt.t: Added an explicit
	    socket%S/telnet-protocol
	property to control TELNET filtering.
	I'd been using the presence/absence of
	    socket%S/telnet-output
	to control it, but that started looking
	messy.

INCOMPATIBLE CHANGE:
	* skt.t: Renamed below two socket props:
	    allow-nonprinting-input  -> pass-nonprinting-from-net
	    allow-nonprinting-output -> pass-nonprinting-to-net
	because a socket actually has two inputs (from net and muq)
	and two outputs, thus the old nomenclature is ambiguous.

	* skt.t: Added a
	    socket%S/allow-nonprinting-input
	matching the pre-existing
	    socket%S/allow-nonprinting-output
	function.  (The internal filtering was already
	implemented, but no muf-level control provided.)

Mon Oct 23 21:03:50 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Added a third select() bitmap everywhere in
	anticipation of checking for TCP "urgent data". (Took
	me a good bit of page-flipping to realize that this
	is probably the intended way of doing that.)

	* jobbuild.t: Added four prims
	    int-chars2
	    int-chars4
	    chars2-int
	    chars4-int
	to convert between integers and bytes in network
	order.  These are intended primarily for use in
	TCP and UDP communications.

	* skt.t: Added two properties:
	    socket%S/telnet-input
	    socket%S/telnet-output
	to lay the ground for TELNET protocol support.

Mon Oct 23 17:56:06 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.25.0 release

Mon Oct 23 00:48:36 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Changed |set |get and |ged to allow,
	and work correctly with, odd-size blocks.  This
	is to support datagram style blocks with keyval
	headers and char bodies.

Sun Oct 22 17:54:32 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t:  Historic moment :).   Muq just did its
	first successful UDP send/acknowledge round-trip.

	* jobbuild.t: Added
	    |delete-nonchars
	prim to efficiently drop all non-char values from
	a block.  This is useful for removing the address
	information from datagrams, and similar applications
	are likely to arise regularly.

Sun Oct 22 01:45:32 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added
	    string-to-chars[
	function parallel to existing
	    string-to-ints[
	function.

Sat Oct 21 23:14:36 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Added property
	    socket%S/crnl-to-nl-on-input
	to control the below behavior.

	* skt.t: Fixed:  skt.t had been failing to convert
	\r\n -> \n on input.  (But the control-char filtering
	was converting the '\r' -> ' ' which masked the problem.)

Fri Oct 20 01:06:38 1995  Jeff Prothero  <cynbe@muq.org>

INCOMPATIBLE CHANGE:
	* jobbuild.t: Renamed
	    ]listen-for-sockets
	to
	    ]listen-on-socket
	The old name was fine for TCP sockets, but didn't make
	much sense for UDP sockets, where you get back datagrams
	instead of TCP sockets when you read.

Thu Oct 19 19:18:56 1995  Jeff Prothero  <cynbe@muq.org>

	* obj.t: Did a cut|sort|uniq on a old mudlist, then
	subtracted RFC 1700, and added the resulting portlist
	to the set of ports allowed Muq users by default. Also
	Added in the range 7000-32000 excepting 17007.

	* Added properties
	    socket%S/ip0
	    socket%S/ip1
	    socket%S/ip2
	    socket%S/ip3
	to return the four octets of the socket's
	far-end internet address as integers.  This
	is redundant with the 
	    socket%S/that-address
	property, but the integers are sometimes handier
	than the string.  (And vice versa.)


Thu Oct 19 00:29:57 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Historic moment:  Muq opens its first outbound
	tcp connection and returns a result. :)

Wed Oct 18 22:47:22 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Added property
	    socket%S/that-address
	returning string values like "128.95.44.22"
	for remote address to which socket is connected.

Tue Oct 17 18:05:25 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Added two properties
	    socket%S/this-port
	    socket%S/that-port
	to return integer port numbers for near and far
	ends of a socket connection.

INCOMPATIBLE CHANGE:
	* jobbuild.t: Renamed:
	    root-make-socket  -> make-socket
	    ]root-open-socket -> ]open-socket
	    root-close-socket -> close-socket
	    ]root-listen-for-sockets -> ]listen-for-sockets
	and removed the root-only restrictions on execution.
	Rationale:
	o   With the below port-restriction bitmaps in place,
            allowing normal users to open net connections is
	    reasonably safe, and can be made as safe as the
	    site admins choose, up to and including completely
	    forbidding it by clearing the bitmap entirely.
	o   Muq is intended as a network toolkit, and it is
	    becoming clear that any user writing network
	    code is likely to need access to facilities like
	    the WWWeb.
	o   I want to encourage users to write neat things,
	    and allowing as much net access as reasonable
	    prudence permits is consistent with this.

	* z-muq.t: Added two muq commandline options:
	    --destports=80,4000-5000	    Allowed outbound network ports.
	    --rootdestports=80,4000-5000    Same, for root.
	These initialize bitmaps restricting the ports
	to which Muq jobs may connect.  This is intended
	to allow easy access to important net resources
	like FTP and the WWWeb without leaving us wide
	open to abuse of NFS and X Window System servers.

Mon Oct 16 21:25:30 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added a
	    root-all-active-sockets[
	prim to return a block of all sockets with
	active file descriptors associated. (Pakrat
	correctly noted some time back that there
	was no easy way for root to take a socket
	inventory.)

	* job.t: Whee -- |read-any-stream-packet seems to be working!

Sun Oct 15 16:11:18 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Fixed ']join' to return an empty string
	when given an empty block, instead of reporting
	a type error.

INCOMPATIBLE CHANGE:
	* job.t: Renamed
	   job%S/sleep-until
	to
	   job%S/sleep-until-sec
	and added
	   job%S/sleep-until-nsec
	to allow for nanosecond precision (currently unused).
	Disallowed direct setting of these values, to prevent
	malicious corruption of the sleep queue.

	* job.t: Added
	   job%S/promiscuous-no-fragments
	property, which is used during |read-any-stream-packet
	calls to cache the matching argument value.

Sun Oct 15 00:56:32 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added
	   job%S/doing-promiscuous-read
	property, which is NIL normally but T during a
	|read-any-stream-packet call.  This is mostly
	for internal book-keeping purposes, but is made
	available for inspection by multi-job debuggers
	and such.

Sat Oct 14 22:21:57 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Created
	   |read-any-stream-packet
	prim to play the role of C/Unix select() call.

Wed Oct 11 22:36:13 1995  Jeff Prothero  <cynbe@muq.org>

INCOMPATIBLE CHANGE:
	* skt.t: Changed the old syntax

	   [ :message-stream message-stream
	     :port 4201
	     :protocol :socket-stream     ( optional )
	     :address-family :internet    ( optional )
	     :interfaces :any             ( optional )
	   | ]root-listen-for-sockets

	to new syntax

	   [ :socket socket
	     :port 4201
	     :protocol :socket-stream     ( optional )
	     :address-family :internet    ( optional )
	     :interfaces :any             ( optional )
	   | ]root-listen-for-sockets

	-- that is, the old :MESSAGE-STREAM parameter has
	been replaced with a :SOCKET parameter, where
	socket%S/standard-output gives the message-stream
	to use.
	   The point of this change is to provide a socket
	object associated with the listen()ing datastructure
	which may be used to interact with it.  Before,
	the internal skt.t listen()ing datastructure had no
	avatar in the MUF-visible db, meaning there was no
	easy way to check its port number, close it, or
	whatever.
        To convert your code, just change your

	   [ :message-stream message-stream
	     ...
	   | ]root-listen-for-sockets

	to

	   root-make-socket -> socket
	   message-stream  --> socket%s/standard-output
	   [ :socket socket
	     ...
	   | ]root-listen-for-sockets


INCOMPATIBLE CHANGE:
	* skt.t: Now ignores attempts to change
	    skt%S/standard-input
	    skt%S/standard-outtput
	to non- message-stream values, to reduce the
	need to constantly check for validity of these
	values internally.

	* skt.t: Merged struct Skt_listener_rec into
	struct Skt_buffer_rec, buying increased uniformity
	at the cost of some wasted buffers on each port on
	which we listen().  One doesn't normally listen on
	more than half a dozen ports, so this seems a good
	tradeoff...

Wed Oct 11 00:10:07 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Added some more properties:
	   skt%S/fd-to-read
	   skt%S/fd-to-write

Tue Oct 10 23:48:40 1995  Jeff Prothero  <cynbe@muq.org>

INCOMPATIBLE CHANGE:
	* skt.t: Changed values for skt%S/type field:
	    "bat" --> :batch
	    "tty" --> :tty
	    "tf"  --> :tcp
	    "eof" --> :eof
	This seems more consistent with general CommonLisp
	conventions.  (I believe the old values for this field
	predated the introduction of keywords into Muq.)

Tue Oct 10 01:21:23 1995  Jeff Prothero  <cynbe@muq.org>

	* obj.t obj_Neql(): Fixed: Ephemerals were crashing us.

Mon Oct  9 14:30:17 1995  Jeff Prothero  <cynbe@muq.org>

	* lst.t: Fixed so "ls" lists 'car' and 'cdr' fields in
	list cells, and 'cell/car' and '12 --> cell/car' work.

	* Fixed some signed/unsigned stuff based on compile errors
	kindly forwarded by Dave Gilbert -- his version of gcc does
	better error checking that the version I'm using.

Sun Oct  8 16:51:39 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Support for ephemeral lists:
	    JOB_STACKFRAME_EPHEMERAL_LIST
	    pop-ephemeral-list
	    ]e
	    ephemeral-cons
	    job%s/ephemeral-lists

Sat Oct  7 20:31:48 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.24.0 release

	* Struct, ephemeral-struct, and ephemeral-vector stuff working.

Sun Oct  1 10:15:08 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Arity for 'intern' was { $ -> $ $ } for
	some reason, rather than the correct { $ -> $ } ... fixed.

	* job.t: Added the prims
	    symbol-type
	    set-symbol-type
	for consistency with the treatment of other symbol slots.

	* sym.t: Added a "type" field to symbols.  I still find
	CommonLisp the Language 2nd Ed's description of types
	very confusing, especially in terms of intended implementation
	pragmatics, but Norvig's "Paradigms of Artificial Intelligence
	Programming" p836-7 states that we have separate namespaces for:
	  functions+macros;
	  variables
	  datatypes defined by defstruct, deftype or defclass
	(He lists seven namespaces, the others of less relevance here.)
	We could put types on the proplist, which I suspect to be the
	usual approach, but I think adding a slot makes more sense in
	the Muq context.

	* Makefile2.in: Renamed:
          "make check"      -> "make torturetest"
          "make quickcheck" -> "make check"
	since I'd switched to using "make quickcheck" as my
	routine selfcheck test, saving "make check" for
	special occasions, such as when sipping hot eggnog
	while warming my feet by the Yule log... :)

	* muf.t: Added ']vec' synonym for ']make-vector'.

Sat Sep 30 16:10:41 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t compile_path(): Hacked to understand "-1" in
	vec<-1> context.  Also vec<.5>.  Still a sketchy area
	in the compiler.

	* h/obj2.h: Various twiddling with the tagbits to open
	up room for the ephemeral types, and also room for future
	expansion.  Maximum tag length expanded from 8 to 11 bits.
	See "Vm_Obj Tagbits" in the manual.

Thu Sep 28 00:00:31 1995  Jeff Prothero  <cynbe@muq.org>

	* Removed bol.t, unused since the change-over from
	Scheme to CommonLisp as our standard, since CommonLisp
	doesn't have a distinct type 'Boolean'.  (t and nil are
	"just" symbols.)

	* Removed "Protocol" header sections:  Folding makes
	them too irrelevant to be worth maintaining.

	* Started laying groundwork for ephemeral structures:
	In C, I pass stack-allocated structures around as fn
	parameters a lot as an efficient way of communicating
	state, and I'd like to do the same thing in my Muq code.
	Added prims
	   ephemeral?
	   is-ephemeral?
	   pop-ephemeral-object
	   pop-ephemeral-struct
	   pop-ephemeral-vector
	   make-ephemeral-object
	   make-ephemeral-struct
	   make-ephemeral-vector
	   make-ephemeral-vector-from-block
	and properties
	   job%s/ephemeral-objects
	   job%s/ephemeral-structs
	   job%s/ephemeral-vectors
	and the
	   JOB_STACKFRAME_EPHEMERAL_OBJECT
	   JOB_STACKFRAME_EPHEMERAL_STRUCT
	   JOB_STACKFRAME_EPHEMERAL_VECTOR
	stackframe types.

Tue Sep 26 20:22:02 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added
	    keyword?
	    is-keyword
	prims to simplify scanning for keywords as distinct from symbols.

Mon Sep 25 18:16:26 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added
	    copy-structure
	    structure?
	    is-a-structure
	prims to go with below structure-support functions.

	* Removed the references to fuzzball-support@netcom.com, since
	Muq no longer has any discernable relationship to fuzzball.

Sun Sep 24 21:19:06 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added
	    find-structure-slot
	to go with below structure-support functions.

Wed Sep 20 20:42:25 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added some prims to support structures:
	    make-structure-definition
	    make-structure
	    get-structure-slot
	    set-structure-slot
	    get-structure-slot-property
	    set-structure-slot-property
	    structure-definition-p
	    is-a-structure-definition

	* obj.h: By way of restoring the ability to have kinds of
	variable-size objects (structure-definition being the
	immediate beneficiary), restored a size-in-slots parameter
	to obj_Alloc(), obj_Init, sizeof_*() and all for_new() fns.

Sun Sep 17 04:11:53 1995  Jeff Prothero  <cynbe@muq.org>

	* mod.t: Added cdf.t and sdf.t (class- and structure-definition)
	classes.

	* obj.t (OBJ_BYTES_BETWEEN_GARBAGE_COLLECTIONS): Increased
	from 100000 to 500000.

	* -1.23.0 release

INCOMPATIBLE CHANGE:
	* job.t: Merged:
	    job%s/terminal-input + job%s/terminal-output -> job%s/terminal-io
	    job%s/debug-input    + job%s/debug-output    -> job%s/debug-io
	    job%s/query-input    + job%s/query-output    -> job%s/query-io
	(This brings us closer to conforming with the CommonLisp
	standard for initial streams.)  This also involved combining
	the previously-separate Muq input and output streams into
	a single bidirectional stream.  This change should only
	affect existing code explicitly using the above names:
	Any such code should be changed to use the -io name.

	* job.t: Added '|char-int' and '|int-char' functions for
	rapid conversions between blocks of ints and blocks of
	chars.

	* job.t: Added 'read-value' and 'read-stream-value' functions
	to allow reading arbitrary stream values much as read-char
	and read-stream-char allow reading "txt"-packet characters.

Sat Sep 16 11:18:26 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added 'unread-char' and 'unread-stream-char'
	functions.

	* mss.t: Added mss_Read_Value() and mss_Unread_Value().

	* mss.t: Removed old mss%s/chars-only property, added new
	mss%s/line and mss%s/column properties.

	* job.t:  Added 'flush' and 'flush-stream' functions, for
	flushing through partial lines when desired.

	* job.t job_Make_Job():  Fixed: Was failing to record child as
	being new owner of job when clearing JOB_STACKFRAME_LOCK_CHILD
	to JOB_STACKFRAME_NULL in parent after a fork, resulting in
	parent thinking it owned the lock and failing to block if
	it immediately tried to re-acquire the lock.

	* sym.t sym_sprintX():  Package prefix wasn't getting printed
	on symbols not in current package, due to using the wrong
	package in the relevant check (symbol's home package instead
	of job_RunState.job->package).  Fixed.

Fri Sep 15 19:17:51 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added |subblock[ function.

	* mss.t: Split mss_Send_Would_Block() off from
	mss_Maybe_SendSleep_Job().

Thu Sep 14 19:21:59 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Changed ']join' to also accept a block of chars.

	* Makefile2.in (FASTCHECKTARGETS): Dropped x-vm from
	"make quickcheck".

Sun Sep 10 00:30:31 1995  Jeff Prothero  <cynbe@muq.org>

	* Redid message stream architecture twice more, settling on
	a fundamental layout of, essentially, a stream of stackblocks,
	with some translation/compatability hacks to allow making it
	look as though one is doing I/O char by char or line by line.
	This is pleasingly simple underneath;  Major drawback is needing
	four bytes in the stream to hold each char passing through, but
	most alternatives seem too baroque.  Fallback position if it
	proves a problem is to pass 3-byte immediate strings through,
	using only 4/3 byte per char in transit.

Sat Sep  9 14:02:11 1995  Jeff Prothero  <cynbe@muq.org>

	* mss.t: Killed string-length and buffer-length properties,
	the former because I'm eliminating the string, the latter
	in favor of a new max-packet property which returns the
	maximum packet size which can be written, which is of more
	interest to the muf programmer than buffer-length (which
	is one larger than max-packet, an implementation detail).

	* Changed muq/c/Configure.in to add -Aa -D_HPUX_SOURCE
	when compiling with the native HPUX cc, a suggestion
	from Nightmare (mkaufman@mcs.kent.edu).  From the manpage,
	it appears this still won't work unless one has purchased
	the extra-cost compiler from HP...

	* Lots of minor fixes to suppress compiler warnings about
	signed <-> unsigned comparisons, based on a compile log
	David Gilbert provided using the Cygnus release of gcc 2.7.0.
	I probably missed a few due to line numbers having changed
	too much, or created a few more in the process of fixing the
	given ones...

Wed Sep  6 22:32:31 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t draw_glyphs(): Fixed: Typecheck on gcontext had
	"drawable" instead of "gcontext" due to cut-and-paste
	oversight, disabling ]draw[-image]-glyphs functions. 

	* job.t: Fixed: flush-display wasn't popping it's argument.

Mon Sep  4 17:15:02 1995  Jeff Prothero  <cynbe@muq.org>

	* mss.t: Added two properties to message streams:
	    allow-reads
	    allow-writes
	(Partial implementation of a Pakrat suggestion.)

	* jobbuild.t: Added some new message stream functions:
	    read-byte
	    read-char
	    read-stream-byte
	    read-stream-char
	    read-stream-packet
	    write-stream-packet
	    maybe-write-stream-packet

	* mss.t: Added vectors to message streams.

Mon Sep  4 13:41:59 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: As support for bidirectional message streams,
	hacked job_P_Read_Stream() and job_P_Read_Line() to
	actually do the read from mss->twin instead of mss.
	At the moment, we always have mss==mss->twin, so this
	should be a no-op...

Sun Sep  3 23:58:32 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.22.0 release

Sun Sep  3 15:28:26 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: throw() and job_P_Return() had code which assumed
	that throw( <any>, JOB_END_JOB ); would never return, but
	it sometimes does:  Resulted in execution falling through
	to unrelated switch() cases.  Kudos to Pakrat for yet again
	producing a compact, reliable stimulus to trigger the bug!

	* job.t: Noticed by inspection that job_P_Get_Stackframe()
	was preserving two hard pointers across a
	job_Guarantee_Headroom() call.  Oops!  Fixed.

	* muf.t: Added support for
	    with-child-lock-do{ ... }
	and
	    with-parent-lock-do{ ... }
	syntax, the latter being a synonym for
	    with-lock-do{ ... }
	and the difference being which job inherits the lock
	across a copy-job operation.

	* jobbuild.t: Added PUSH_LOCKFRAME_CHILD instruction.

	* jobbuild.t: Added JOB_STACKFRAME_LOCK_CHILD stackframe type.

	* jobbuild.t: Switched 'integer?' from being a fast op
	to being a slow op.

	* vm.t db_nuke_oldest(): Pakrat reported that remove()
	fails to remove an empty directory under Linux.  This
	appears to be a Linux bug.  Switched to using rmdir()
	to remove the directory.

Sat Sep  2 23:03:02 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.21.0 release

Sat Sep  2 15:39:55 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t job_P_Get_Stackframe(): Changed so for :normal frames,
	the program-counter value returned is offset by the number of
	bytes of constants, so as to have it be zero for the first
	instruction in the function.  This isn't how the pc is actually
	stored on the stack, but it is less confusing as a value
	to return to the debugger.

	* usq.t usq_Dequeue():  Another Pakrat error report:  Had (twice)
	    if (!OBJ_IS_CLASS_USR(next)	
	where
	    if (!OBJ_ISA_USR(next)	
	and as a result the server was crashing whenever both root
	and a non-root user had jobs in the run queue.

	* job.t: Hacked job_P_Write_Output_Stream() and
	job_P_Write_Stream() to call write-stream-by-chunks when
	the value is too large to fit in the stream buffer: This
	means that ',' and 'write-stream' and functions based on
	them should be able to handle strings longer than 511
	bytes again now.

	* job.t: Added 'write-substring-to-stream' prim as support
	for writings strings longer than stream buffer, in chunks.

Fri Sep  1 23:14:06 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added functions
	  compiled-function-bytecodes[
	  compiled-function-constants[
	  compiled-function-disassembly
	as hooks to allow printing nice disassemblies of functions
	from the MUF level.

Thu Aug 31 15:09:49 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t:  Added the following typecheck functions:
	  is-an-assembler
	  is-callable
	  is-a-char
	  is-a-compiled-function
	  is-a-condition
	  is-a-cons
	  is-a-constant
	  is-a-data-stack
	  is-a-float
	  is-a-function
	  is-an-integer
	  is-a-job
	  is-a-job-queue
	  is-a-job-set
	  is-a-list
	  is-a-lock
	  is-a-loop-stack
	  is-a-number
	  is-a-package
	  is-a-message-stream
	  is-a-session
	  is-a-socket
	  is-a-stream
	  is-a-stack
	  is-a-string
	  is-a-symbol
	  is-a-user
	  is-vanilla
	  is-a-vector

	* vm.t db_nuke_oldest(): Rewrote to use remove(...) rather
	than system("rm -rf ...") in the hopes of eliminating
	erratic problem Pakrat reports of vm3/ sometimes not getting
	deleted.  Using remove() is better coding practice anyhow.
	LATER:  Pakrat pointed out I actually had system("rm -rf ... &")
	in the code.  Hadn't noticed, and not sure why, but that was
	probably most or all of the problem.  New code is still better though.

	* job.t: Pakrat pointed out that
	    root:
	    /lib<"muf"> cd
	    root:
	    . "set" get-keys-by-prefix[
	    root: "set" 1
	was returning result as an old-style block, when it should be
	    root: [ "set" |
	Turned out, sure enough, an exact match is a special case
	chunk of code that didn't get updated in the conversion sweep.

	* skt.t: Pakrat reports typing ^C into a telnet connected to
	Muq results in no further output.  Traced this to telnet sending
	a telnet-protocol IP command followed by a DM request;  It then
	appears to suppress all output until the request response arrives.
	Since Muq currently doesn't understand TELNET protocol, no
	response ever arrives.  I don't see a quick fix, so this problem
	will have to wait until we implement TELNET protocol support.

Wed Aug 30 12:39:03 1995  Jeff Prothero  <cynbe@muq.org>

	* Configure.in Makefile2.in:  Commented out ALLOCA stuff,
	I don't use it, don't trust it, and it's giving problems
	on HP/UX according to Nightmare.

	* skt.t: Args 2 and 3 to the select() have been drawing
	warnings because Posix and most systems want them to be
	(fd_set*) but older systems (e.g. HP/UX) want them to be
	(int*).  Changed to casting them to (void*), which ANSI
	specifies as being compatible with all pointer types.

	* usr.t: Nightmare pointed out usr_set_group() was
	missing the 'static' keyword.  Fixed.

Tue Aug 29 09:31:03 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.20.0 release

	* vm.t db_renaming: Pakrat is reporting a failure here
	under Linux which I don't understand.  Added a couple
	more values to the error message to possibly shed a ray
	of light.

	* Makefile[2].in: Added just-x-vm to compile and not
	delete x-vm, something Pakrat has found useful.

	* job.t: Pakrat pointed out the lack of functions to convert
	from float to int.  Added 'floor' 'ceiling' 'truncate' and
	'round', from CommonLisp.

	* skt.t: Traced a Pakrat-reported crash to an FF byte in
	buffer expanding to a -1 index into char_condition[] (i.e.,
	instead of a 255 index).  Changed most instances of "Vm_Chr"
	in the file to "Vm_Uch" (i.e., changed "char*" to "unsigned char*").

	* skt.t: Changed class field from "ioq" to "skt".

	* skt.t: Pakrat pointed out that "root-make-socket lss" was
	crashing the server.  skt.t was assuming that any socket with
	type != SKT_TYPE_EOF had an associated buffer, but newly created
	sockets had type SKT_TYPE_TTY and no buffer.  Added a secondary
	check for buf_no >= 0 everywhere.

	* muf.t: Pakrat pointed out that lots of comments and error
	messages had "}always_do{" where "}always-do{" was intended.
	Fixed!

Sun Aug 27 18:19:09 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.19.1 release

	* job.t job_set_read_nil():  The logic to modify the value of
	    job%s/read-nil-from-dead-streams
	was actually modifying the value of
	    job%s/root
	This was purely a cut-and-paste error due to working too quickly.

	* job.t job_P_Queue_Job:  Pakrat pointed out that "@ run-job"
	was hanging us in an infinite loop.  Turned out to be because
	job_P_Queue_Job wasn't bumping the instruction pointer jS.pc
	by hand to point to the next instruction before requeuing the
	job, in the special case where it is the current job:  Thus,
	the job was requeued with the pc still pointing to the start
	of the requeue-job instruction, thus the requeue-job got
	re-executed next cycle,	and so on ad infinitum.  Fixed.

	* job.t throw(): Another crashing bug turned up by Pakrat:
	The unwinding section JOB_STACKFRAME_ENDJOB case had the incorrect
		throw(    l[ 2], JOB_ENDJOB );
	where either of
		throw(    l[-2], JOB_ENDJOB );
		throw( jS.l[ 2], JOB_ENDJOB );
	would have been correct.  Looks like mental confusion between
	similar possibilities.
	  The closely related JOB_STACKFRAME_THROW and JOB_STACKFRAME_GOTO
	cases had the same bug, undoubtedly via cut-and-paste propagation.
	  The closely related code in job_P_Return() had the same bug in
	the same three cases.

	* Renamed A-READ.ME (and kin) everywhere to #README#
	which sorts much higher (in particular,	sorts above
	00-version.t in muq/muf) and is legal on just about
	every filesystem, even DOS 1.0.

Sun Aug 27 00:15:09 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.19.0 release

	* muf.t: Added "after-child-does{" and "after-parent-does{"
	syntax support.

	* job.t: Zipped through adding   JOB_STACKFRAME_PROTECT_CHILD
	support parallel to pre-existing JOB_STACKFRAME_PROTECT
	in all the obvious spots.

Sat Aug 26 22:38:18 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Changed 'over' from being fast to slow op.

	* jobbuild.t: Added ASSEMBLE_AFTER_CHILD op parallel
	to ASSEMBLE_AFTER.

	* jobbuild.t JOB_STACKFRAME_PROTECT_CHILD: Added this
	stackframe type.

	* jobbuild.t: Added fast PUSH_PROTECT_CHILD operator
	parallel to existing PUSH_PROTECT operator.

	* jobbuild.t: Changed '|length' from being a one-byte
	fast opcode to being a two-byte slow opcode.

	* job.t throw():  The second of three recently-added
	    switch (op) {
	statements was missing a case for 
	    case JOB_ENDJOB:
	resulting in the default: clause crashing us on
	certain job_P_End_Job() invocations.

Sat Aug 19 09:58:59 1995  Jeff Prothero  <cynbe@muq.org>

	* mss.t: Added 'twin' property to message-streams, as support
	for bidirectional message streams built of twin unidirectional
	streams.

	* obj.t: Removed 'group' property from vanilla objects, leaving
	it only on user and job objects.  Current notion is to have a
	user object representing each group, with the group property
	pointing to a vector of the group members, and then change the
	job_must_control() check to, if the primary check fails, see
	if acting_user is in object%s/owner%s/group.
	  The group property on jobs is intended to be set to indicate
	that objects created by the job should be owned by the indicated
	group rather than acting_user.  (Shouldn't we set acting_user to
	the group, instead?)

Fri Aug 18 11:56:46 1995  Jeff Prothero  <cynbe@muq.org>

	* mss.t: Increased MSS_MAX_MSG_Q from 8 to 32.  This makes the
	slot array about the same size as the byte buffer, which seems
	good balance, and lets us write up to 32 bytes into a buffer
	even when doing I/O by single bytes/chars.

	* -1.18.1 release

	* Configure.in: Added "Xfuncs.h" to list of places to look
	for bcopy() prototypes, since OSF/Alpha keeps one there.

Thu Aug 17 23:01:40 1995  Jeff Prothero  <cynbe@muq.org>

	* sym.t: sym_prop_table[]'s end-of-array sentinel was
	missing.  Still worked on Linux and Irix, wasn't noticed
	until Nightmare reported selftest failing on HP/UX.
	  (gcc on HP/UX generates complaints from 'as' about possible
	GR3 conflicts whenever stackframes bigger than 8K are
	allocated, but these appear harmless.)

Thu Aug 17 10:01:40 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t validate_compile_muf_file(): Hacked inserver compiler
	to export its muf compiler instance in @%s/compiler for
	benefit of below.

	* job.t: Added a 'job%s/compiler' property, largely to make the
	below function useful at the interactive-user level.

	* job.t: Renamed 'muf-reset-line-number' to 'muf-set-line-number'
	and added an integer operand, on Pakrat's suggestion: Slightly
	more general and not significantly harder to implement.

Wed Aug 16 14:17:37 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Added 'muf-reset-line-number' prim to
	reset inserver muf compiler's notion of the
	current line number.

Wed Aug 16 00:04:50 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Kim pointed out that
	    after{ nil end-job }always-do{ "Himom!\n" , }
	wasn't working correctly.  Traced it to 'end-job'
	failing to record that an end-job operation was
	in progress when calling 'throw' to unwind the
	stack and execute after{}always-do{} clauses.
	  Fixed by below addition of a JOB_STACKFRAME_ENDJOB
	stackframe type to provide a way of recording that
	an 'end-job' needs to be resumed after an always-do
	clause completes, and hacking various functions like
	throw(), job_P_Return() and job_P_Get_Stackframe to
	implement/understand the new stackframe type.

Tue Aug 15 12:42:03 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added JOB_STACKFRAME_ENDJOB stackframe type parallel
	to JOB_STACKFRAME_RETURN, JOB_STACKFRAME_GOTO and
	JOB_STACKFRAME_THROW, to record that an interrupted 'end-job'
	operation is in progress while executing an after{}always-do{}
	clause.

	* job.t: Added catch_SIGHUP() and catch_SIGTERM() clones of
	catch_SIGINT(), so we'll exit cleanly on HUP and TERM signals,
	instead of losing the db.

	* job.t: Renamed catch_interrupt_signal() to catch_SIGINT().

	* job.t sig_int():  This unix-level signal handler function
	wasn't resetting itself when called, which meant that two
	or more ^Cs in rapid sequence could kill the server before
	the db was cleanly saved, leaving a vm0 around and losing
	one session's work (under SysV-based unix systems).

	* Makefile.in (x-vm): Added x-vm clause so "make x-vm" will
	work:  Pakrat was having Muq crash in this test and wanting
	to run it in isolation, which the makefiles weren't allowing.

	* vm.t db_renaming():  Hacked to retry a few times on EEXIST,
	as a trial fix for Pakrat's report of it crashing with a
	'directory not empty' error.

	* job.t job_Fatal():  Prepended "*****" to error message, so
	muq/bin/muq-summarize-errors will notice and report them.

Mon Aug 14 10:49:04 1995  Jeff Prothero  <cynbe@muq.org>

	* Split muq/c/To-do into muq/c/Bugs muq/c/Feeps and muq/c/Projects

Sun Aug  6 12:30:08 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.18.0 release

Sun Aug  6 02:33:43 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Hacked read-line to return NIL when attempting
	to read from an empty message stream set 'dead'.

	* job.t: Added 'read-nil-from-dead-streams' property.

	* mss.t: Added 'dead' property.

Sun Aug  6 01:08:57 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.17.0 release

Sat Aug  5 12:55:13 1995  Jeff Prothero  <cynbe@muq.org>

	* cdt.t: Added 'debug' condition.

	* cdt.t: Added condition 'print-jobs', intended to be
	signalled to session-leader by binding it to (typically)
	^T via set-socket-char-condition.

	* skt.t skt_read_socket():  Added control char handling
	support based on [gs]et-socket-char-condition stuff.

	* job.t: Added two new prims: 
	    get-socket-char-condition
	    set-socket-char-condition
	These support implementing ^C ^T &tc type functionality
	in shells.

	* skt.t: Created skt_signal_broken_pipe() and changed
	skt_usually_close_socket() to call it, so that the
	session-leader can be notified of lost network links.

	* job.t: Created job_Signal_Job() and moved
	most of the guts of job_P_Signal() into it,
	producing a generic facility for firing signals
	at jobs.

	* cdt.t: Added the following standard conditions:
	    broken-pipe-warning
	    read-from-dead-stream-warning
	    write-to-dead-stream-warning
	    urgent-character-warning
	(Documented in conditions manual.)

	* -1.16.0 release

Fri Aug  4 22:58:52 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added |position primitive on Pakrat's suggestion,
	searching a stackblock for a given value.

	* obj.t:obj_Set_Owner(): Added a check to forbid changing
	ownership of a job, since Pakrat was coredumping us nicely
	that way, and I don't regard it as something worth supporting.

	* job.t job_Startup(): Added ignore_pipe_signal() call:
	Pakrat said we were dying of "broken pipe"s on Linux after
	telnet disconnects, at least occasionally.

	* vm.t:db_renaming(): Added strerror() to error message in
	partial response to Pakrat's comment that the rename is
	occasionally failing on Linux.  Added strerror() to a few
	other I/O fatal error messages while I was at it.

	* obj.t and muf.t:  Pakrat pointed out a number of comments
	and error messages were still using the old /#/ path syntax
	instead of %s/ syntax... changed, then changed the error msgs
	to noncrashing %%s/ syntax... :)

	* job.t: Another bug Pakrat found:  job.t:job_set_acting_user() had
            MUQ_WARN ("@%s/acting-user must be /u<\"root\"> to set @%s/acting-user");	
	where it needed
            MUQ_WARN ("@%%s/acting-user must be /u<\"root\"> to set @%%s/acting-user");	
	Also found 17 other similar instances in job.t, and one in asm.t:
	I suspect they date from automatic conversion of the source from
	the older path syntax.

Wed Aug  2 21:44:21 1995  Jeff Prothero  <cynbe@muq.org>

	* cdt.t: Stopped hand-assembling child-of2? child-of? and
	]do-signal, in favor of just coding them up as MUF in
	01-C-condition.t.

	* job.t: Killed as obsolete: /etc/ded /etc/poz /etc/run /etc/stp.

	* job.t: Killed inserver 'pause-job' prim as obsolete.

Tue Aug  1 18:15:25 1995  Jeff Prothero  <cynbe@muq.org>

	* Added 'net1' and 'net2' fields to headers of all objects,
	as part of continuing to lay the foundation for transparent
	networking.  This now gives us -24- bytes of overhead on
	every object in ram *wince*:
	   4 bytes hashtable index pointer (assuming hashchains average 1 long)
	   8 bytes ramblock header containing hashtable link, length &tc.
	   4 bytes owner, for accounting and privilege checking.
	   8 bytes net1/net2 containing time-to-cache and signature
	           to defeat bogus object requests from maliciously
		   hacked servers.
	That's not wonderful when the average object size exclusive
	of header is about 16 bytes, but I don't see any cures which
	aren't worse than the disease.

INCOMPATIBLE CHANGE:
	* job.t: Renamed old 'kill-job' operator to 'kill-job-messily'.
	(See newly created MUF 'kill-job' function.)

	* job.t (job_Is_Idle()): Converted 'usec' parameter into a
	'job_Is_Idle_Usec' global:  gcc was warning longjmp()s might
	clobber it, and rather than trust all the cc implementations
	out there to implement 'volatile' correctly -- and risk painful
	debugging of those that don't -- I just made it a global.

	* job.t: Modified 'end-job' prim to accept arbitrary argument,
	(used to require NIL) and save it in @%s/end-job for possible
	later inspection.

	* job.t: Added an 'end-job' slot to jobs to hold the argument
	given to 'end-job':  Hook for diagnosing reason for death of a
	job.

	* job.t: Discovered pending_signals and blocked_signals were
	still present in struct Job_Header_Rec:  Nuked them.

	* cdt.t: Added 'kill' condition, child of 'serious-condition',
	to be signaled to a job in order to kill it.

	* muf.t: Added 'end-job restart to muf-shell.

Mon Jul 31 00:14:20 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.15.0 release

	* sym.t (sym_for_set): Pakrat pointed out that
	    "if" --> /lib<"muf">/if%s/name
	coredumps the server nicely.  Traced to sym_for_set()
	letting attempts to set NAME and PACKAGE default to
	a MUQ_FATAL warning instead of correctly returning an
	error string.

	* sym.t: Changed sym_Alloc() and sym_Alloc_Asciz() to search
	/lib/muf after checking current package and all packages used
	by current package.  This brings them into line with
	muf.t:is_user_global():  The inconsistency between the three
	was resulting in the different "abrt"s in
	    [ :function :: { -> ! } 'abrt goto ;
	      :name 'muf:abort
	      :report-function "return to main mud-shell prompt."
	    | ]with-restart-do{
	        with-tag abrt do{
	            ...
	            abrt
	            ...
	sometimes referring to different symbols, which is very
	confusing, not to mention in violation of CommonLisp's
	specified read-read consistency property.

Sun Jul 30 00:23:49 1995  Jeff Prothero  <cynbe@muq.org>

INCOMPATIBLE CHANGE:
	* muf.t (look_up_prefix()):  Moved is_user() check
	above is_prim() check, 'cause I'm sick of having
	   12 -> job   job
	return something other than 12.  This does mean
	that users can now confuse themselves by doing
	   : : ;
	and redefining ':', or such.  For now, they'll
	just have to learn how to do
	  ': unintern
	I think.

	* job.t (job_Is_Idle()): Fixed a timing control bug
	which was slowing us down.  I'd noticed that even
	simple errors like 'pop' on an empty stack were taking
	a second or two, which didn't make sense when just a
	couple hundred bytecodes were involved.  Traced it to
	the 'usec' parameter to job_Is_Idle() which is set to
	one second when no I/O or job activity has been recorded
	recently (to keep Muq from busy-waiting, burning up
	CPU time and upsetting sysadmins) continuing to be used
	after input has read, resulting in a one-second wait each
	time around the job_Is_Idle() loop when there is computation
	to be done but no pending net I/O.  Fixed by resetting usec
	to job_Max_Microseconds_To_Sleep_In_Busy_Select after
	longjmp()ing back to the main job_Is_Idle() loop.

Sat Jul 29 12:20:31 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added 'job-is-alive?' predicate.

	* Changed muq/el/folding* modes from 444 to 644,
	per Pakrat comment that 444 mode results in errors
	when un-tarring over an existing Muq fileset.

	* usr.t: Added following properties:
	    break-disable
	    break-enable
	    break-on-signal
	These are intended to provide default values for
	the corresponding job properties at login.

	* job.t: Hacked job_P_System_*() to allow user to
	modify things:  User needs to be able to set and
	clear @%s/break-enable and such.  We'll need
	additional security here by and by, though...

	* job.t: Fixed: JOB_STACKFRAME_VANILLA was missing
	from the list of no-op stackframe types in job_P_Return().

	* job.t: Fixed: JOB_STACKFRAME_VANILLA was missing
	from the list of no-op stackframe types in throw().

INCOMPATIBLE CHANGE:
	* job.t: Having used and contemplated the copy-job,
	copy-jobset, and copy-session operations a bit, I've
	decided to somewhat modify them:

	  -> ALL NOW HAVE THE CHILD (or nil) AS RETURN VALUE.
	     This seems simpler, more frequently what
	     one actually wants, and simplifies writing
	     code which use any of the three depending
	     on circumstance.  It is easy to extract the
	     new jobset and/or session from the returned
	     job if one wishes.

	  -> THE CHILD JOB IS NO LONGER IMMEDIATELY RUN.
	     The child job is now placed in ~%s/pause-queue
	     when created, instead of in one of the run-queues.
	     this should eliminate lots of race conditions, and
	     simplify wiring together pipelines and graphs of
	     jobs.
               For those who prefer to have the child immediately
	     running, I've added convenience functions
		 fork-job
		 fork-jobset
		 fork-session
	     to 10-C-utils.t, which simply do the corresponding
	     copy- operation and then immediately call run-job
	     on the child.
	

Sat Jul 29 00:14:01 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.14.9 release.

	* skt.t: skt_try_to_refill_src_byts(), same problem
	with reading a full message stream.

	* skt.t: skt_try_to_refill_dst_msg_q() wasn't calling
	joq_Run_Queue() after sending to an initially empty
	message stream:  Thus, the system could hang with a
	job waiting indefinitely for input that was in fact
	available. (I'm not sure just why this problem wasn't
	apparent before, but suspect it relates either to the
	recent message-stream rewrite, or else to the recent
	increase in slots per message stream.)

Thu Jul 27 17:15:50 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.14.8 release.

	* obj.t: Tracked a particularly obscure crash (which Pakrat
	did a magnificent job of finding a consistent recipe to
	reproduce on demand!) to dir.t assuming that propdirs are
	not shared between objects, but obj.t:obj_Dup() copying
	the pointers over.  Since I'm reluctant to copy arbitrarily
	large propdirs in a single bytecode, I've changed obj_Dup()
	(and hence 'copy', 'copy-job', 'copy-jobset' and 'copy-session')
	obj to install empty propdirs on the new object.  (I'm also
	also a little uncertain about security implications of doing
	copying here.)

	* dir.t: Old bug discovered while searching for above one:
	dir.t:del_leaf() had
	    for ( ;  v < len  ;   ++v) {
	where it needed
	    for ( ;  v < len-1;   ++v) {
	resulting in garbage being copied into the end slot
	of a block right before it gets recycled, a minor
	potential problem which appears never to have mattered.

Wed Jul 26 02:08:51 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: job.t:job_end_job() was deleting dying job from
	~%s/ps but not from /ps, resulting in root-print-jobs
	incorrectly finding and trying to list dead jobs and
	getting confused by bogus values in them like session==0.
	  This bug reported by Pakrat, who also correctly diagnosed
	it as minor :).

Sat Jul 22 19:04:38 1995  Jeff Prothero  <cynbe@muq.org>

	* Configure.in: Changed
	    cp Config.h `${MUQDIR-$HOME/muq/bin}/muq-config hdir`
	to
	    mv Config.h `${MUQDIR-$HOME/muq/bin}/muq-config hdir`
	because the extra copy of Config.h left in muq/c turned
	out to be a nuisance:  Doing
	    #include "Config.h"
	tends to get the muq/c version instead of the muq/h version,
	so hacking muq/h/Config.h tends to have no result, which is
	needlessly confusing.  

	* -1.14.7 release.

Sat Jul 22 11:47:00 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Tweaked after{}always-do{} implementation so that
	if a fork (i.e., copy-job, copy-jobset or copy-session) is
	done in the after{...} clause, the always-do{...} clause
	will be executed only in the parent.  This is in response
	to problems Kim was having with the clauses getting
	executed in both parent and child, crashing stuff:  It is
	clear that one really wants exactly-once not at-least-once
	semantics for the always-do{...} clause.  Choice of parent
	over child is for consistency with the with-lock construct,
	which in turn is following unix's lead on (non)inheritance
	of locks by child processes.
	  This change involves a number of tweaks various places,
	eliminating the old blanch-protectframe prim, and providing
	a new assemble-always-do prim, because BLANCH_PROTECTFRAME
	had to change from a slow op to a fast op taking a code
	offset (because in the child it must now know how to skip
	over the always-do{...} clause).

Fri Jul 21 18:56:12 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added a 'make-job-queue' prim.  I'd forgotten we
	didn't have a way of creating stand-alone job-queues yet!

	* job.t: Added a 'queue-job' prim so users can pause and
	resume jobs.  There is currently no way to be sure what
	queue a job was in when requeued this way, hence no way
	to reliably reverse the operation:  We'll be needing
	something more sophisticated eventually.  But it is better
	than nothing and pushes us back to 500 prims :).

INCOMPATIBLE CHANGE:
	* job.t: Renamed 'root-kill-job' to 'kill-job' and changed
	to require only normal permissions over job in question
	(that is, that @%s/acting-user either own the job or else
	be root running with OMNIPOTENT set):  It is pretty clear
	that users should have a sure-fire way of killing their
	own runaway processes.  This introduces some potential
	security/reliability problems, but we'll just have to deal
	with them.

Fri Jul 21 00:12:22 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.14.6 release.

Thu Jul 20 22:32:49 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added 'callable?' primitive.  Puts us
	back to 499 prims :).

	* usq.t: usq_Enqueue() sanity check was using
	OBJ_IS_CLASS_USR() macro rather than the
	OBJ_ISA_USR() macro, resulting in a crash when
	root was encountered (since root satisfies the
	latter but not the former).  This also crashed
	root-become-user :).

	* usr.t: for_new() was leaving user jobqueues owned by
	jS.j.acting_user (i.e., root) instead of chowning them
	to be owned by the user being created. This meant that
	when root-become-user forked, the new user did not get
	scheduled to run (since joq owner was already running)
	so attempts to do root-become-user gave a dead console.

Wed Jul 19 19:21:54 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t (skt_accept_connect_request):  Had been correctly
	fixed to specify "new" as the message... but specified the
	length of "new" as zero, resulting in null string being
	sent.  (Fallout from the recent message stream changes.)
	With this fixed, the nanomud now works again.

	* job.t: Changed job to ignore all attempts to set any of
	the standard I/O streams to a non message-stream value:
	There doesn't seem to be any good reason to allow this,
	and disallowing it saves both server and in-db code from
	needing special cases for non-message-stream values in them.

	* job.t (job_P_Write_Output_Stream): Hacked write-output-stream
	(the comma operator) to be more permissive, succeeding if the
	job's actual-user owns the output message stream, as well as
	if the usual conditions (acting-user owns it, or acting-user
	is root running with OMNIPOTENT bit set) hold.  This avoids
	having all error messages issued under the influence of
	root-as-user-do{} get lost and generate infinite recursion
	followed by infinite loop, as Pakrat's
	    /u<"pat"> root-as-user-do{ "hi" , }	
	example was doing.  (Now runs without problem.)

Wed Jul 19 00:27:03 1995  Jeff Prothero  <cynbe@muq.org>

	*  (root): Both recursion stack overflows and data stack
	overflows now seem to cleanly detected, announced and
	recovered-from.

	* muf.t: Fixed:  Recursive calls.  These appear to have been
	broken since we switched indirecting CALLs via function
	objects to indirecting them via symbol->function.  Had to
	mess around various places to get this all on the up-and-up
	again.  Invocation of named local functions (those nested
	within other functions) would have been futzed by the same
	problem.  Evidently people aren't doing much of this!
	Also established obj_Etc_Bad global.

Tue Jul 18 18:32:58 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Hacked job_Guarantee_Headroom() to pop
        obj_Stackslots_Popped_After_Data_Stack_Overflow items off
	the datastack on overflow (unless this would put jS.s < jS.s_bot,
	in which case it just sets jS.s = jS.s_bot).  This is intended
	to give jobs a better chance of successfully recovering from
	datastack overflow.

Tue Jul 18 00:14:30 1995  Jeff Prothero  <cynbe@muq.org>

	* muq.t: Added 'stackslots-popped-after-data-stack-overflow'
	property.

	* job.t: Fixed:  Truly obscure server bug exposed by Pakrat's
	    /u<"pat"> root-as-user-do{ "hi" , }	
	example:
	    job_State_Publish()
	was calling 
	    job_Guarantee_Headroom( 1 );
	before completing all
	    vm_Register_Hard_Pointer();
	calls, which meant that if the 
	    job_Guarantee_Headroom( 1 );
	call failed and longjmp()d back to job_Is_Idle(), then
	    job_State_Unpublish()
	would wind up trying to
	    vm_Unregister_Hard_Pointer();
	a pointer which was never
	    vm_Register_Hard_Pointer();
	'ed, and crash the server.  Whew! :)

Sun Jul 16 12:01:43 1995  Jeff Prothero  <cynbe@muq.org>

	* Pakrat had reported that "nil nil quit" was coredumping.  This
	was due to old ]throw-error code:  The below changes fix this, and
	"nil nil quit" now gives "Sorry: Needed an arg of type world."
	as it should.

	* jobbuild.t: Eliminated obsolete catch-errors{}, PUSH_ERRSET, ...

	* jobbuilt.t: Added 'simple-error' function as a lazy way
	of signalling simple-errors.

INCOMPATIBLE CHANGE:
	* jobbuild.t: Eliminated the obsolete ']throw-error' and
	']throw-continuable-error' operators.  (The ]signal based
	system should be used instead.)  This change isn't very
	incompatable at this point, since they were no longer
	accomplishing much :).

Sat Jul 15 10:13:08 1995  Jeff Prothero  <cynbe@muq.org>

	* Cleaned out the old (pre-string-buffer) message stream stuff.

Sat Jul 15 09:56:17 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: skt_accept_connect_request():  Pakrat pointed out we
	were sending message type "new", content "", breaking old code
	that expected message content "new".  Changed to message type
	"txt" and content "new".

Sun Jul  9 22:02:42 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.14.5 release.

	* WHEE!! Muq just passed it's regression test suite with the
	new message-stream logic in place.  As far as I'm concerned,
	that's the official watershed between
	   Muq Phase I:   Design and implementation, and
	   Muq Phase II:  Bringing it up to beta-test quality.
	Since I'm now basically happy with the core Muq datastructures
	for the first time in Muq history :).

Sun Jul  9 11:28:33 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Pakrat pointed out that reclosing an already-closed
	socket was segfaulting the server.  Oops!

Tue Jul  4 12:06:23 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.14.4 release.

	* muf.t: On Pakrat's suggestion, added \e escape as
	syntax for ascii ESC (\033).  This sounds like it may be
	fairly standard despite not (?) being part of ANSI C,
	and is certainly handy when hacking up vt100 char sequences.

	* skt.t: Added following props:
	    %S/allow-nonprinting-output
	    %S/input-by-lines
	(These were already implemented internally, but had no
	MUF access to change them.)  Pakrat needs this to play
	with cursor addressing stuff :).

INCOMPATIBLE CHANGE:
	* skt.t: Changed 'filter-output-cr' prop to 'nl-to-crnl-on-output',
	and values from "yes"/"no" to T/NIL.

	* -1.14.3 release.

	* muf.t: Pakrat pointed out that @<12> and such were broken.
	Turned out that muf.t:compile_path() had
	    } else if   (buf[1] == '/' || buf[1] == '%') {
	where it needed
	    } else if   (buf[1] == '/' || buf[1] == '%' || buf[1] == '<') {

	* -1.14.2 release.

Tue Jul  4 00:05:54 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Pakrat pointed out that
	    [ "\\\\" "\\" "\\" "" | "\\\\\\\\" ]replace-substrings
	was segfaulting the server.  Turned out that
	job_replace_substring() was failing to add a null to the
	end of the buffer after doing a replacement, resulting in
	the next strstr() call potentially going wild.  Added a
	    buf[buflen] = '\0';
	and it seems ok now.

Mon Jul  3 18:02:05 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Hacked job_State_Publish/job_State_Update to
	update bytecodes-executed counts in jobs.

	* job.t: Hacked 'length2' to work on data and loop stacks too.

	* ssn.t: Eliminated 'foreground-jobset' property.

	* ssn.t: Added %S/next-jobset and %S/previous-jobset properties
	to link all jobsets in a session to parent session.

	* jbs.t: Added %S/next-jobset and %S/previous-jobset properties
	to link all jobsets in a session to parent session.

	* job.t: Restored "pid" property on jobs, mostly from
	worries about obnoxious users setting bogus jobnames.

Sat Jul  1 17:35:18 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Added job-queues[ prim.

Wed Jun 28 22:42:36 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Changed to enter jobsets into sessions with jobset
	rather than pid as key, since we no longer try to guarantee
	that pids (job names) are unique.

	* jbs.t: Added job-queue property.

Tue Jun 27 21:54:10 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Removed "pid" property from jobs.

Mon Jun 26 17:05:31 1995  Jeff Prothero  <cynbe@muq.org>

	* Hax.h: 
	    95Jun26 Pakrat report: <sys/wait.h> needs to be
	    before <netinet/in.h> on Linux in order to prevent a
	    "redefinition of LITTLE_ENDIAN" warning: Made the fix.

Mon Jun 26 11:34:00 1995  Jeff Prothero  <cynbe@muq.org>

	* asm.t: Same fix as belong in asm.t:warn().

	* job.t: Andy/Pakrat pointed out muf.t:warn() was formatting
	strings twice, resulting in one output "%" requiring "%%%%" in
	input string.  Fixed by splitting job_Warn() into job_Warn()
	and job_Error(), and having muf.t:warn() call job_Error() (which
	does no further formatting) rather than job_Warn() whichd does.)
	  This bug dates from the introduction of job.t:warn(), which
	added line number reporting to the in-server compiler err msgs.

Sun Jun 18 21:56:41 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.14.0 release, mostly 'cause it looks like
	my working disk is blowing again and an extra
	backup wouldn't hurt :).

Thu Jun 15 18:08:19 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added following CLX functions:
	    CLOSE_DISPLAY
	    COLOR_P
	    COLORMAP_P
	    CURSOR_P
	    CREATE_GCONTEXT
	    CREATE_WINDOW
	    DESTROY_WINDOW
	    DISPLAY_P
	    DISPLAY_ROOTS
	    DRAWABLE_HEIGHT
	    DRAWABLE_WIDTH
	    DRAWABLE_X
	    DRAWABLE_Y
	    DRAW_IMAGE_GLYPHS
	    FONT_ASCENT
	    FONT_DESCENT
	    FONT_P
	    GCONTEXT_BACKGROUND
	    GCONTEXT_FONT
	    GCONTEXT_FOREGROUND
	    GCONTEXT_P
	    MAKE_EVENT_MASK
	    MAP_SUBWINDOWS
	    OPEN_DISPLAY
	    OPEN_FONT
	    PIXMAP_P
	    QUERY_POINTER
	    SCREEN_BLACK_PIXEL
	    SCREEN_P
	    SCREEN_ROOT
	    SCREEN_WHITE_PIXEL
	    TEXT_EXTENTS
	    UNMAP_WINDOW
	    WINDOW_P

	* Got bored and added the following classes:
	    xcl.t  X-window CoLors.
	    xcm.t  X-window ColorMaps.
	    xcr.t  X-window CuRsors.
	    xdp.t  X-window DisPlays.
	    xft.t  X-window FonTs.
	    xgc.t  X-window Graphic Contexts.
	    xpx.t  X-window PiXmaps.
	    xsc.t  X-window SCreens.
	    xwd.t  X-window WinDows.

	* job.t: Eliminated 'signal-job' primitive.

	* job.t: Eliminated STACKFRAME_SIGNAL stackframe type.

	* job.t: Removed following job properties:
	    blocked-signals
	    pending-signals
	    sigabrt
	    sigabrt-mask
	    sigalrm
	    sigalrm-mask
	    sigchld
	    sigchld-mask
	    sigcont
	    sigcont-mask
	    sigfpe
	    sigfpe-mask
	    sighup
	    sighup-mask
	    sigill
	    sigill-mask
	    sigint
	    sigint-mask
	    sigkill
	    sigkill-mask
	    sigpipe
	    sigpipe-mask
	    sigquit
	    sigquit-mask
	    sigstop
	    sigstop-mask
	    sigterm
	    sigterm-mask
	    sigtstp
	    sigtstp-mask
	    sigttin
	    sigttin-mask
	    sigttou
	    sigttou-mask
	    sigusr1
	    sigusr1-mask
	    sigusr2
	    sigusr2-mask
	    sigwinch
	    sigwinch-mask
	    sigxcpu
	    sigxcpu-mask
	    sigxfsz
	    sigxfsz-mask

Wed Jun 14 00:48:48 1995  Jeff Prothero  <cynbe@muq.org>

	* joq.t: joq_Reset() had
	    OBJ_FROM_INT(o);  where
	    OBJ_FROM_INT(0);
	was needed.

Tue Jun 13 22:39:46 1995  Jeff Prothero  <cynbe@muq.org>

	* joq.t: After wasting an evening or two trying to hand-debug
	the new double-round-robin job scheduling code, finally got a
	clue and wrote proper invariant-checking code:
	    usq_Invariants()
	    usr_Invariants()
	    joq_Invariants()
	For starters, discovered that joq_Unlink() had a 'next'
	where a 'prev' was needed -- another cut-and-paste bug,
	that was screwing up the doubly linked list in a job-queue.

Sat Jun  3 20:05:31 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Lots of job scheduler hacking, including:
	Added stop-queue and pause-queue to User class.
	Added 'job-queue?' predicate.
	Added 'job-queue-contents[' function.
	Set all jobs to be in ~%s/ps-queue while alive.

Wed May 31 18:00:08 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Kim pointed out that
	    MUQ_WARN ("@%s/acting-user must be /u<\"root\"> [...]");
	needs to be 
	    MUQ_WARN ("@%%s/acting-user must be /u<\"root\"> [...]");
	since MUQ_WARN runs the text through vsprintf. *blush*. Fixed.


Fri May 26 22:04:46 1995  Jeff Prothero  <cynbe@muq.org>

	* usr.t: Added property:
	    ps-queue

Wed May 24 23:15:50 1995  Jeff Prothero  <cynbe@muq.org>

	* usr.t: Added property:
	    time-slice

Tue May 23 22:28:15 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added property:
	    priority

Tue May 23 00:37:42 1995  Jeff Prothero  <cynbe@muq.org>

	* usr.t: Added following properties:
	    run-queue-0
	    run-queue-1
	    run-queue-2
	(All job-queue valued.)


Mon May 22 19:41:06 1995  Jeff Prothero  <cynbe@muq.org>

	* usq.t: Created.

	* muq.t: Added following properties:
	    max-bytecodes-per-timeslice
	    max-microseconds-to-sleep-in-idle-select
	    max-microseconds-to-sleep-in-busy-select
	    microseconds-to-sleep-per-timeslice
	

Sun May 21 14:42:38 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Everted the logic in job_Run/job_run/job_next, in order
	to put the outermost loop in z-muq.t (i.e., the application)
	rather than job_next(), in the interests of making Muq more
	"embeddable".  In the process, job_run() evaporated, most of
	the guts of job_next() moved into job_Run(), and job_Run()
	got renamed job_Is_Idle().  Then went out and soaked up sunlight :)

Sat May 20 12:51:48 1995  Jeff Prothero  <cynbe@muq.org>

	* joq.t: Made job-queues a full-fledged hardwired class.
	Making them vectors was a space hack, and starting to
	look too kludgy.

Thu May 18 19:39:00 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.13.1 release.

	* sys.t: Changed
	sys%s/usermode-cpu-microseconds to
	sys%s/usermode-cpu-nanoseconds  and
	sys%s/sysmode-cpu-microseconds to
	sys%s/sysmode-cpu-nanoseconds:
	This reflects the Posix.4 change in this field.

	* sys.t: Andrew James Bolt <ajb1011@phx.cam.ac.uk> reported
	two compile errors in this module under
	  SunOS ursa.cus.cam.ac.uk 5.3 Generic_101318-70 sun4d sparc
	Apparently Posix.4 has replaced timeval with timestruc_t in
	struct rusage, replacing the old tv_usec field with a tv_nsec
	field:  Added Configure.in logic to detect this, and sys.t
	logic to work either way.  (The SunOS 5.4 I have access to
	appears to be missing <sys/rusage.h> completely :(.)

	* cfg.t: Created.

Wed May 17 23:12:20 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Removed the now-obsoleted catch-errors{} clauses
	from muf-shell and compile-muf-file.

	* -1.13.0 release.

Wed May 17 00:02:16 1995  Jeff Prothero  <cynbe@muq.org>

INCOMPATIBLE CHANGE:
	* muf.t: Renamed "continue" to "loop-next".  This is because
	CommonLisp doesn't appear to define an equivalent to the C
	"continue" operator, but -does- define a "continue" that
	has a quite different purpose.  "loop-next" appears unlikely
	to conflict with anything else, and fits the pattern set by
	"loop-finish", the CommonLisp equivalent to C "break".

Tue May 16 18:03:43 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: is_user_global_check():  Fixed: 'any-constant
	was compiling to the value of the constant instead of
	the constant symbol itself.

	* job.t: Hacked job_Loop_Overflow() to pop
	muq%S/stackframes-popped-after-loop-stack-overflow
	stackframes off the loop stack before attempting to
	continue, yielding some chance of evading an infinite
	loop.

	* muq.t: Added %S/stackframes-popped-after-loop-stack-overflow
	property, defaulting to 10.

Sun May 14 12:13:33 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added @%s/break-disable property: Defaults to NIL,
	setting it T turns 'break' and ']break' into no-ops.

	* job.t: Added @%s/break-enable property: Defaults to NIL,
	setting it T enters debugger instead of aborting with an
	error message in ]error and ]cerror.

	* Added a ']break' prim that invokes @%s/do-break on given
	block.

	* Redefined 'break' to build a condition block from a string
	before invoking @%s/do-break, instead of just passing the
	string.

Sun May 14 01:12:44 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added :data field to RESTART frame to provide a hook
	for adding arbitrary user-defined data to restarts. This affects:
	    with-restart-do{ ... }
	    get-restart
	    get-nth-restart
	    get-stackframe
	and the implementations of various other fns calling the above.

Sat May 13          1995  Jeff Prothero  <cynbe@muq.org>

	Kiwis 5-0 in America's Cup!  Whee!! :) :)

Fri May 12 21:50:00 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: validate_muf_shell():  Added proper abort tag
	and restart to default muf:muf-shell, based on below.

	* muf.t: Added validate_lib_muf_abrt() to create muf::abrt
	and   : abrt 'muf::abrt goto ;   function.

Thu May 11 23:32:33 1995  Jeff Prothero  <cynbe@muq.org>

INCOMPATIBLE CHANGE:
	* z-muq.t: Changed from "-x /etc/lib/zbl" syntax for -x switch,
	to "-x muf:compile-muf-file" syntax.  This former convention
	predated the introduction of packages, and wasn't very consistent
	with current practice.

	* z-muq.t: z-muq.t:assemble_zbl() becomes
	muf.t:validate_compile_muf_file(), parallel to below,
	and is stored as /lib/muf<"compile-muf-file">%s/function==cfn.

	* z-muq.t: z-muq.t:assemble_zil() becomes muf.t:validate_muf_shell()
	and is stored as /lib/muf<"muf-shell">%s/function==cfn instead of
	as /etc/lib/zil==fun.  The new arrangement matches general usage;
	the old one predates packages and symbols and such.

Tue May  9 00:05:47 1995  Jeff Prothero  <cynbe@muq.org>

	* Changed chop-string[ to accept a character delimiter as
	an alternative to string delimiters.

	* Moved the debugger to a 'debug' package.

	* Started a simple line editor package 'edit'.

	* usr.t: Added usr%s/text-editor property.

Mon May  8 22:28:17 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added JOB_OP_GET_LINE_FROM_STRING/get-line-from-string.

	* jobbuild.t: Added JOB_OP_COUNT_LINES_IN_STRING/count-lines-in-string.

Mon May  8 00:31:39 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added JOB_OP_PROGRAM_COUNTER_TO_LINE_NUMBER.

	* jobbuild.t: Added JOB_OP_ASSEMBLE_LINE_NUMBER / assemble-line-number.

Sun May  7 16:39:21 1995  Jeff Prothero  <cynbe@muq.org>

	* Renamed:
	    usr%s/]do-break      to usr%s/do-break
	    usr%s/]debugger      to usr%s/debugger
	    job%s/]do-break      to job%s/do-break
	    job%s/]debugger      to job%s/debugger
	    job%s/]debugger-hook to job%s/debugger-hook
	The point of this is to make the core Muq classes less
	MUF-specific:  These property names will need to be used in
	all (most?) Muq languages, hence should avoid characters
	likely to give fits to some of them.  (Like weenie Algolics! :)

Sun May  7 03:48:30 1995  Jeff Prothero  <cynbe@muq.org>

	* Yippee!  Finally selftests clean again after Friday's
	muqing with the program-counter fields. :) :) :)

Sun May  7 02:14:01 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: throw() was keeping hard pointers across a call to
	throw_load_last_normal_stackframe() which called CFN_P() on
	the returned-to executable: Thus, this would have crashed
	someday.  Disquieting!

	(v -1.12.5 release was sometime May 7.)

Sat May  6 16:04:40 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Initial session initialization had gotten messy,
	to the point that /u/root accidentally got recycled (!).
	Simplified ssn.t:for_new() and jbs.t:for_new() to just create
	a session or jobset (respectively), rather than trying to
	create appropriate children as well, and concentrated all the
	other logic in job_Make_Job().

Fri May  5 20:47:06 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Eliminated job%s/executable and job%s/program-counter
	properties, and corresponding C-level x_obj and program_counter
	fields in Job_RunState, in favor of keeping them in the top
	NORMAL stackframe on the loop stack.  This slides the contents
	of the compiled-function and program-counter NORMAL-frame slots
	down one frame (e.g., each NORMAL frame now contains the program-
	counter for itself instead of the NORMAL frame below it), which
	makes NORMAL frames easier for both code and humans to understand.

Wed May  3 17:27:50 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.12.4 release.

	* job.t: 'finish-assembly': Added 'force' argument.

	* job.t: Fixed: 'finish-assembly' was forgetting to pop one arg.

Tue May  2 14:17:48 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.12.3 release.

	* job.t: Locks are now inherited by parent but not
	child after a fork (per unix spec), and acquiring
	a lock one already holds is a no-op (per Kim request).

	* jobbuild.t: Added JOB_STACKFRAME_NULL.  We change
	unwanted LOCK frames to this.

	* sys.t:sys_end_of_data_segment(): Deleted
	"extern void* sbrk( int );".  This was supposed to have
	been done in the   Tue Apr 11 09:35:18 1995  fix, but
	somehow got missed or undone.

	* job.t:job_P_String_To_Int: Added (const char*) to
	atoi() call to suppress warning on DEC Alpha OSF/1. 

	* -1.12.2 release.

Tue May  2 00:01:17 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: JOB_OP_EXEC / 'exec' added, following unix model.

Mon May  1 19:53:56 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Added
	    expression =>fn symbol
	syntax for binding a function to a symbol.

Sun Apr 30 14:47:07 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Added
	    expression => symbol
	syntax for binding a value to a symbol.

	* jobbuild.t: Added
	     JOB_OP_POP_FUN_BINDING /  pop-function-binding
	    JOB_OP_PUSH_FUN_BINDING / push-function-binding 
	     JOB_OP_POP_VAR_BINDING /  pop-variable-binding
	    JOB_OP_PUSH_VAR_BINDING / push-variable-binding 
	(more support for binding symbols).

	* job.t: Added @%s/function-bindings and @%s/variable-bindings,
	incipient support for binding (as opposed to setting) symbols.
	(Another CommonLisp support thing.)

	* obj.t: Added /lib/common-lisp (nickname "cl") to the set of
	packages automatically created upon startup, as part of
	warming up for a Muq lisp compiler.

Sat Apr 29 00:30:28 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Pakrat observed that 'on:' wasn't working with
	keywords or symbols.  This should be fixed.

	* -1.12.1 release.

Fri Apr 28 00:15:17 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added: JOB_OP_GET_STACKFRAME / get-stackframe[.

Thu Apr 27 23:47:35 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Added: JOB_OP_COUNT_STACKFRAMES / count-stackframes.

Tue Apr 25 04:11:47 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: 'root-make-wormhole' prim.
	* muf.t: 'wormhole?' prim.
	* wrm.t: Created.
	* prx.t: Created.

Tue Apr 25 01:19:44 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t:  Added the following new streams to the pre-existing
	'standard-input', 'standard-output', 'error-output' set:
	    query-input
	    query-output
	    debug-input
	    debug-output
	    terminal-input
	    terminal-output
	    trace-output
	This is functionally similar to the CommonLisp stream
	set;  It differs in that CommonLisp combines
	'query-input' and 'query-output' into a single
	'*query-io*' bidirectional stream, and similarly
	has '*debug-io*' and '*terminal-io*'.  But Muq doesn't
	have bidirectional streams, and I think introducing
	them would be more mess than it would be worth.
	
INCOMPATIBLE CHANGE:
	* skt.t:
	Renamed "dst-stream" to "standard-output".
	Renamed "src-stream" to "standard-input".
	(This is for consistency with the below change.)

INCOMPATIBLE CHANGE:
	* job.t:
	Renamed "dst-stream" to "standard-output".
	Renamed "err-stream" to "error-output".
	Renamed "src-stream" to "standard-input".
	(This brings us in line with CommonLisp.)

Mon Apr 24 02:34:51 1995  Jeff Prothero  <cynbe@muq.org>

	* Added JOB_OP_REMOTE_P ('remote?' function).

	* Whee!  Actually got ]signal to invoke a signal handler. :)

Thu Apr 20 20:35:54 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Added ]with-handlers-do{ ... } syntax.

	* jobbuild.t: Added push-handlersframe and pop-handlersframe.
	Also JOB_STACKFRAME_HANDLERS, JOB_STACKFRAME_HANDLING and
	JOB_STACKFRAME_BUSY_HANDLERS.

	* job.t:  Fixed job_P_Return to verify that there -is-
	a NORMAL frame to return to before it starts unwinding
	the stack.  Similar fix to throw().  This prevents the
	stack getting unwound more than once when the return
	or throw fails to find an appropriate target -- don't
	want locks unlocked twice, after{}always-do{} clauses
	getting run twice, &tc.

	* job.t:  Muq passes selftest again after below. whew! :)

Thu Apr 20 00:00:09 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: Switched from implicit loopstack frame sizes
	(deduced from frame type) to explicit frame sizes, stored
	at both top and bottom of each frame.  This simplifies
	and speeds the stack traversal code, and allows traversal
	either direction, as well.

	* jobbuild.t: Wrapped OBJ_FROM_INT around all the
	JOB_STACKFRAME_* macro defs, to save the clutter of doing
	the equivalent inline in the code everywhere.

Wed Apr 19 16:12:15 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: job_crypt() was trying to null out length-3 strings,
	which isn't possible due to them being stored in the pointer.
	As Kim reported, this was crashing the server *blush*.

	* job.t: job_P_Crypt() ad job_P_Encrypt_Password() were backwards:
	the former was nulling out the encrypted string and the latter
	wasn't.

Sun Apr 16 02:44:39 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Fixed: SYMBOL_VALUE had
	{"SYMBOL_VALUE","",0,0,0,0,0,0,'s','_','s',"_","_","s",A(0,0,1,1,0),
	  "JOB_CACHE_ARGS;"
	  "L0 = SYM_P(L2)->value;"
	  "JOB_UNCACHE_ARGS;"
	},
	where it needed
	{"SYMBOL_VALUE","",0,0,0,0,0,0,'s','_','s',"_","_","s",A(0,0,1,1,0),
	  "{"
	    "Vm_Obj o = L2;"
	    "JOB_CACHE_ARGS;"
	    "o = SYM_P(o)->value;"
	    "JOB_UNCACHE_ARGS;"
	    "L0 = o;"
	  "}"
	},
	The problem is that L2 and L0 expand into code which
	depends on 's', but 's' cannot be trusted between
	JOB_CACHE_ARGS and JOB_UNCACHE_ARGS because SYM_P
	may invalidate it by shuffling memory.

Tue Apr 11 09:35:18 1995  Jeff Prothero  <cynbe@muq.org>

	* sys.t: sbrk() prototype was hardwired in
	sys_end_of_data_segment, and dgilbert@gamiga.guelphnet.dweomer.org
	reported that the prototype conflicts with the OSF-1 v2.0
	unistd.h declaration.  Moved the prototype into Need.h.

	* Nuked muq/mod. long overdue since it is incredibly antique
	and unused.

Thu Apr  6 04:27:42 1995  Jeff Prothero  {cynbe@muq.org}

	* muf.t: 'get-nth-restart' and 'get-restart'.

	* asm.t: asm_Startup() wasn't providing a CFN_P(bad)->src.

	* asm.t: asm_Call() now accepts compiled-functions as well.

INCOMPATIBLE CHANGE:
	* muf.t: local-to-function functions now have the
	compiled-function as their value instead of the function.

INCOMPATIBLE CHANGE:
	* muf.t: muf_Continue_Compile now returns Compiled-Function
	rather than Function.

	* muf.t: muf_Continue_Compile was using FN while assuming
	that it's Vm_Obj* s was valid, oops.  Could've crashed us,
	although not likely to.

INCOMPATIBLE CHANGE:
	* job.t: job_Call() no longer accepts Functions,
	only Compiled-Functions and Symbols.  (Accepting Functions
	was an obsolete arrangement predating introduction of symbols.)

Wed Apr  5 18:59:39 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: push-restartframe, pop-restartframe.

	* jobbuild.t: PUSH_RESTART_FRAME, POP_RESTARTFRAME.
	JOB_STACKFRAME_RESTART.

Wed Apr  5 05:07:28 1995  Jeff Prothero  {cynbe@muq.org}

	* muf.t: Added "]with-restart-do{".

INCOMPATIBLE CHANGE:
	* muf.t: Changed "with-lock{" to "with-lock-do{" for the sake
	of increased consistency.

Tue Apr  4 03:34:54 1995  Jeff Prothero  {cynbe@muq.org}

	* z-muq.t (assemble_zbl/zil): Fixed to allocate needed
	labels via asm_Label_Get().

	* asm.t (asm_Label): Added check that label has in fact
	been allocated via asm_Label_Get().

	* muf.t: Moved next_label from muf record to asm record.
	Added assemble-label-get to access it.

Mon Apr  3 18:48:35 1995  Jeff Prothero  <cynbe@muq.org>

	* Makefile: Pakrat pointed out that c/Makefile SHELL and MAKE
	were shipping misconfigured.  Wrote muq/bin/muq-deconfig-c-make
	to fix this, and a call to it in muq/bin/muq-distclean.

	* job.t: Nonlocal goto stuff:
	    assemble-tag
	    job_P_Push_Tagframe()
	    job_P_Pop_Tagframe()
	    job_P_Goto()
	    JOB_STACKFRAME_TAG
	    JOB_STACKFRAME_GOTO

Sun Apr  2 15:41:48 1995  Jeff Prothero  <cynbe@muq.org>

	* cdt.t: validate_condition_dir() added to initialize
	/condition propdir when needed.

	* obj.t: maybe_rebuild_condition_propdir() added to create
	/condition propdir when needed.

	* jobbuild.t: Added 'make-condition', 'condition?' and 'lock?'.

	* cdt.t: Added cdt.t file implementing Class Condition.

Sat Apr  1 03:43:40 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.12.0 release.

	* job.t: Added root-log command for logging to hostfile.

	* z-muq.t: Now creates muq-vm.pid file for benefit of
	watchdog programs and such, unless --no-pid-file is given
	or --security=max.

	* z-muq.t: Added --no-pid-file switch.

	* muq.t: %SYSTEM/security property.

	* z-muq.t: Added --full-db-check switch.

Fri Mar 31 03:21:36 1995  Jeff Prothero  <cynbe@muq.org>

	* sys.t: Added three more properties:
	    usermode-cpu-microseconds
	     sysmode-cpu-microseconds
	     date-microseconds

	* z-muq.t: Changed assemble_zbl() and assemble_zil()
	to recognize that catch-errors{ } now always pushes
	a block.

INCOMPATIBLE CHANGE:
	* job.t: Changed job_P_Pop_Catchframe() to return NIL atop
	an empty block, instead of just NIL.  The point of this is
	to give catch{ } and catch-errors{ } fixed arities independent
	of whether they catch anything.

	* jobbuild.t: slow[] had POP_CATCHFRAME declared as { -> }
	when it is { -> $ } half the time and { -> [] $ } the other
	half.  Changed declaration to { -> [] $ }.

	* job.t: Following up on previous: job_signal_job()
	had
	    if (this != OBJ_FROM_INT(0)) {
	where it needed
	    if (this == obj_Etc_Stp) {
	... I don't see how the first could ever have been correct.

	* job.t: (Kim:) job_P_Signal_Job() had
	    if (JOB_P(job)->q_this == OBJ_FROM_INT(0)) {
	where it needed
	    if (JOB_P(job)->q_this == obj_Etc_Ded) {
	-- another case of changing conventions not propagated?

	* job.t: (Pakrat:) job_P_Replace_Substrings() had
	    Vm_Int block_size = OBJ_TO_INT( jS.s[-1] );
	where it needed
	    Vm_Int block_size = OBJ_TO_BLK( jS.s[-1] );
	Relic of the conversion in block delimiter conventions.

	* obj.t: Added --security={max|high|medium|low} options to
	control server access to host unix filesystem, since people
	are requesting the option of such access.

	* muf.t: downcase_buffer() had
	    while ( c = *++b    &&   (c != '"' || last == '\\')) {
	where
	    while ((c = *++b)   &&   (c != '"' || last == '\\')) {
	was needed.  Ick.

INCOMPATIBLE CHANGE:
	* obj.t: Changed /env keys from keywords to strings, since
	Unix environment strings are case-sensitive, and keywords
	are supposed to be case-insensitive.

	* obj.t: Added --no-environment option for people who don't
	want their environment imported into /env in the server.
	(Pakrat request.)

	* obj.t: Added server signature checking to reduce problems
	with servers being run on dbs with different bytecode
	instruction sets.  Added --ignore-signature option to
	bypass this check when desired.

	* z-muq.t: Added crack_big_option() to handle --xxx[=yyy] options.

	* Per Pakrat suggestion, hacked Configure.in to search for
	rm, ln, mv, sh, grep, make and point the Makefiles to what
	look like reasonable choices.

Thu Mar 30 16:39:14 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Made MUF case-insensitive:
	copy_token_to_lc_buffer() and downcase_buffer();

Wed Mar 29 14:03:21 1995  Jeff Prothero  <cynbe@muq.org>

	* -1.11.0 release.

INCOMPATIBLE CHANGE:
	* muf.t: Switched over from old o/#/k syntax to o%s/k syntax.

Tue Mar 28 05:41:00 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Rationalized line number tracking a bit:
	-> Line numbers are now internally always zero-based, both
	   those relative to start-of-file and those relative to
	   start-of-function.
	-> We always add '1' before displaying for user, of course.
	-> muf.t:next_token() now separately tracks starting and ending
	   line number for a token. 
	-> asm.t:warn() now reports file_line+line_number+1 instead of
	   just line_number -- it was reporting just offset relative
	   to start of function, which as useless and/or confusing.

	* jobbuild.t: NASSTY bug: SYMBOL_FUNCTION, SET_SYMBOL_FUNCTION,
	SYMBOL_VALUE and SET_SYMBOL_VALUE were all failing to use
	JOB_CACHE_ARGS and JOB_UNCACHE_ARGS, hence could result in
	trashed program counter and stack pointers on any call :( :( :(.

Mon Mar 27 03:05:05 1995  Jeff Prothero  <cynbe@muq.org>

	* asm.t: Added "file-line" property.

	* fun.t: Renamed line_number to file_line.

	* muf.t: Pakrat reported that code such as
	    root:
	    : x { -> ? } if pop fi ;
	    root: 
	    t t 'x call
	or even
	    root:
	    : x { -> ? } if pop fi ;
	    root: 
	    t t 'x call{ -> ? }
	was drawing complaints from the arity checker.  (Because naked
	code typed at the commandline gets compiled into an anonymous
	function which had default arity.)  Fixed by changing muf_Reset()
	to declare these invisible outer functions as { -> ? ! }.

Sun Mar 26 00:06:12 1995  Jeff Prothero  <cynbe@muq.org>

	* stm.t: Fixed: stm_Length() had
	    return OBJ_FROM_INT( (len-rat) + cat );
	where it needed
	    return OBJ_FROM_INT( (len-cat) + rat );
	(Kim reported the resulting weird bogus length values for streams.)

	* job.t: Fixed: job_P_Get_Substring() had
	    if (hi < lo-1) MUQ_WARN ("get-substring limits misordered: %d,%d",lo,hi);
	where it needed
	    if (hi < lo  ) MUQ_WARN ("get-substring limits misordered: %d,%d",lo,hi);
	As a result,
	    "" 0 -1 substring
	was segfaulting Muq.  (Reported by Pakrat.)

	* jobbuild.t: Added 'session?' predicate.  Pakrat had pointed
	out it was missing.  Added 'job-set?' predicate while I was
	at it.

	* jobbuilt.t: string-int function, ala C atoi(). (Pakrat request.)

INCOMPATIBLE CHANGE:
	* muf.t: Did the following renamings, partly because the
	'->' would screw up our path syntax lexer, partly for
	CommonLisp compatibility:
	char->int	became	char-int
	char->string	became	char-string
	int->char	became  int-char
	string->ints[	became	string-ints[
	string->keyword	became  string-keyword
	string->words[	became	string-words[
	|keys->keysvals	became	|keys-keysvals

INCOMPATIBLE CHANGE:
	* muf.t: to-upper, to-lower, to-mixed renamed
	string-upcase, string-downcase, string-mixedcase,
	for CommonLisp compatability.

	* jobbuilt.t: Added [? operator.  Need this to be able to
	write ']' in MUF, now that compiler thinks [ and | are
	special.

Tue Mar 21 22:53:49 1995  Jeff Prothero  <cynbe@muq.org>

	* skt.t: Socket type wasn't being changed to EOF as part
	of closing it.  More importantly, skt.t would try to read
	from a closed socket, resulting in a loop burning most of
	available CPU.  Sockets still never actually get physically
	closed at present.  Bug report courtesy of Wyatt.

Mon Mar 20 20:15:58 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Pakrat suggested "# ..." as a comment-to-end-of-line
	syntax, partly to simplify commenting out stretches of code.
	This matches Unix shell, Perl &tc habits well, and CommonLisp
	defines "# " as signalling an error, which isn't much of a
	conflict:  Implemented it in the inserver MUF compiler.

	* muf.t: Pakrat wanted to split a
	   [ ... |
	across multiple lines outside of any fn, but the compiler
	wasn't allowing this.  Fixed inserver compiler to regard
	[ | as another matching syntactic scope marker pair.

	* muf.t: Pakrat pointed out that allowing "12 -> a<b>" and
	interpreting it as an assignment to a local variable called
	"a<b>" is confusing.  Added a check disallowing < > % / : in
	local variable names.

Sun Mar 19 00:53:47 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: job_x_p_get_keys_by_prefix() was still pushing it's
	result block using the old integer block convention, instead
	of the new [ | one.  Fixed.  (Reported by PakRat.)

Sat Mar 18 18:43:53 1995  Jeff Prothero  <cynbe@muq.org>

	* job.t: job_P_Use_Package(): Typo in err msg fixed. (Pakrat)

Fri Mar 17 17:25:05 1995  Jeff Prothero  <cynbe@muq.org>

	* HP/UX doesn't have getpagesize() or getrusage():  Diddled the
	autoconfig stuff to automatically recognize when they are absent,
	and c/sys.t to return default values for the missing quantities.

	* jobbuild.t: When passing via globals, code had two definitions
	of JOB_CACHE_ARGS, second one a left-over null one. (Detected
	by DEC Alpha cc.)

	* Hacked jobpass.t:recursion*() a bit to prevent gcc complaining
	   "warning: function returns address of local variable"

	* job.t: Some machines don't have drand48, but rand() sucks bigtime:
	Added autoconf stuff to use drand48() and random() where possible,
	but to silently settle for rand() when necessary.

Wed Mar 15 03:27:33 1995  Jeff Prothero  <cynbe@muq.org>

	* Whee!  Compiles and selftests again despite autoconfig 2.1 :)
	On Irix 5.2, at least.

Wed Mar 15 00:42:36 1995  Jeff Prothero  <cynbe@muq.org>

	* Started upgrading to autoconfig 2.1.  Lots of little changes
	in the autoconfig macros and such...

Tue Mar 14 17:49:42 1995  Jeff Prothero  <cynbe@muq.org>

	* Makefile2.in (distclean): Renamed "make clobber" to "make distclean",
	which seems more standard.

Fri Mar 10 16:01:21 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: Discovered that the system qsort() on Irix 5.2
	is unstable (entries that compare equal can come out re-ordered
	after the sort), whereas qsort() on Irix 4.01 and all other
	unices tested appears to have been stable, at least on job_Code[].
	  This was resulting in Muq crashing very strangely due to code
	assembling with the wrong opcodes for a given number of extension
	bytes.  Nasty.
	  Rewriting jobbuild.t:code_table_compare() to sort by the triple
	key (key,op,op2) instead of just (key) solves the problem, but Muq
	really should work ok either way... some secondary bugs need to be
	tracked down.
	  (This is the first nassty Muq bug in quite awhile.)

Thu Mar  9 21:25:47 1995  Jeff Prothero  <cynbe@muq.org>

	* asm.t: Fixed: branch_opcode() was returning code+i when it
	needed to be returning job_Code[code+i].op;

	* Muq-detexify.cx: Minor fix to #include files, to get exit() prototype.

Thu Mar  2 23:26:16 1995  Jeff Prothero  <cynbe@muq.org>

	* muf.c: Hmm. gcc allows default: with no statement, but
	but other compilers don't.  Fixed.

Fri Feb 24 12:33:11 1995  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.t: COMPILED_FUNCTION_P arity was $ $ -> $ for some
	reason, when it should be $ -> $. (Pakrat report.)  Fixed.

Thu Feb 23 15:17:16 1995  Jeff Prothero  <cynbe@muq.org>

	* Added Leo's other portability fixes back in, working from
	mailfile:  Moved "#include <arpa/inet.h>" below
	"#include <netinet/in.h>" in h/Hax.h, and changed
	    TRL_PROTO_CHECK(bcopy, bstring.h)
	to
	    TRL_PROTO_CHECK(bcopy, strings.h string.h memory.h bstring.h)
	in Configure.in.

	* Makefile: Removed ^Ls from all Makefiles, per a note from
	Andrew James Bolt <ajb1011@phx.cam.ac.uk>.  (A portability
	fix that got lost in the crash, originally offered by
	Leo Plotkin, plotkin@hoshi.Colorado.EDU.)

Tue Jan  3 19:40:14 1995  Jeff Prothero  <cynbe@muq.org>

	* Per discussion with Kim, split 'crypt' into
	'crypt' and 'encrypt-password', the latter nulling out the
	plaintext, the former not.

Mon Jan  2 02:20:00 1995  Jeff Prothero  <cynbe@muq.org>

	* Per comments from Kim, moved weak-password checking from
	'crypt' into newly-created 'good-password?' function.

	* -1.10.0 release.

	* sym.t: Added protection checking to sym_Find* and sym_Alloc*.

Sun Jan  1 01:51:21 1995  Jeff Prothero  <cynbe@muq.org>

	*  (root): Wrote bin/muq-patch-cshrc in another attempt
	to simplify the Muq installation process.

	* obj.t: More bugs dating from switchover to keyword keys
	as the default:
	    maybe_rebuild_lib_xxx_package() got converted to entering
	packages into /lib under keyword keys, but this is another
	case where we really want to be using strings instead.
	    maybe_initialize_users_packages() had same problem.
	    maybe_rebuild_lib_propdir() had same problem.

	* obj.t: More bugs dating from switchover to keyword keys
	as the default:
	    obj_sort_system_properties_table() was still sorting
	alphabetically on 'name', when it needed to be sorting
	integer order by 'keyword';
	    sort_system_properties_tables() was being called before
	the 'keyword' fields it should be sorting on had been
	established.
	    With those fixed, "/ lss" seems to work correctly again.

	* obj.t: obj_X_Next(): A recent incorrect optimization had
	resulted in hardwired props often being skipped:  For example,
	"/ lss" was resulting in no input.

Sat Dec 31 00:48:09 1994  Jeff Prothero  <cynbe@muq.org>

	* obj.t: As I started to write multi-user support MUF code,
	I decided that is is probably better for /u to be indexed
	by strings rather than keywords.  For example, this keeps
	simple-minded checks to see whether a user of a given name
	exists from cluttering the system with pointless keywords.

	* jobbuild.t: Added string->keyword function.

	* obj.t: Changed /u/kim to /u/pat to avoid confusion or offense.
	Changed /u/Root to /u/root, this is supposed to be a caseless
	system eventually.

	* ssn.t: Property #/skt renamed #/socket.

	* obj.t (obj_Set_Owner):  Added protection checking, so only
	root can do this, and only to a user value.  Also added code
	to update bytes_owned values appropriately.

	* obj.t: Wrote a obj_SizedDup() matching obj_Dup() in
	functionality;  Changed vec_SizedDup() to call obj_SizedDup()
	rather than vm_SizedDup() directly.

	* obj.t: Changed obj_Dup() to set owner to jS.j.acting_user,
	and update jS.bytes_owned.  Also changed cfn_Dup() to call
	obj_Dup() instead of vm_Dup(), likewise stk_Dup() and vec_Dup().

Fri Dec 30 00:12:57 1994  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added job_Must_Control[_Object]() to implement limiting
	modification of objects to owner and OMNIPOTENT jobs.
	Went through job.t:job_P_* adding calls to it where appropriate.

	* job.t: Hacked job_[set_]_act[ual|ing]ing_user() to treat
	jS.j.act[ual|ing]_user variables as a cache and return them
	instead of values in object when fetching from active
	job: @/#/acting-user was failing to reflect current
	value as set by root-as-user-do{ ... }

	* job.t: Patched throw() and job_P_Return() to handle
	USER and PRIVS stackframes.

Thu Dec 29 23:05:36 1994  Jeff Prothero  <cynbe@muq.org>

	* job.t: Added job_Must_Be_Root(), to start implementing
	restriction of root-* functions to root-privileged jobs.
	Inserted calls to it into all appropriate job_P_Root*().

	* job.t: Coded up core multi-user mechanics:
	    job_P_Pop_User_Frame()
	    job_P_Pop_Privs_Frame()
	    job_P_Push_User_Me_Frame()
	    job_P_Root_Push_User_Frame()
	    job_P_Root_Push_Privs_Omnipotent_Frame()

Thu Dec 29 00:47:08 1994  Jeff Prothero  <cynbe@muq.org>

	* Re-edited muq/INSTALL to reflect below.

	* Provided Muq is installed in $HOME, one can now do
	a complete compile and selfcheck without any environment
	fiddling whatever:  When MUQDIR is not defined, all
        Makefiles and shell scripts default to $HOME/muq/bin,
	and they have no internal dependence on PATH. So there. :)

	* Makefile: Wasted at least an hour figuring out that
	  ${MUQDIR:-${HOME}/muq/bin}
	in a Makefile silently fails because it is interpreted
	by 'make' rather than '/bin/sh'.  Changed to
	  $${MUQDIR:-$${HOME}/muq/bin}

Wed Dec 28 23:16:07 1994  Jeff Prothero  <cynbe@muq.org>

	* Changed $MUQDIR to ${MUQDIR-${HOME}/muq/bin} throughout bin/*
	and c/Makefile, in the hope of running correctly when people
	install in their home directory but neglect to set MUQDIR.

	* Configure.in:  Added an explicit check that MUQDIR got set.

	* Chatted for awhile with Whitedove on the Muq nanomud.
	This may be the first actual mudding session on Muq? :)
	One day before Muq's second birthday.

Tue Dec 27 00:44:48 1994  Jeff Prothero  <cynbe@muq.org>

	* muf.t: Surface syntax for below:
	    as-me-do{ ... }
	    root-as-user-do{ ... }
	    root-omnipotently-do{ ... }

	* jobbuild.t: Added multi-user support prims:
	    PUSH_USER_ME_FRAME
	    PUSH_USER_FRAME
	    PUSH_PRIVS_OMNIPOTENT_FRAME
	    POP_USER_FRAME
	    POP_PRIVS_FRAME

	* jobpass.t: Changed parameters_are_faster() to only try doing
	    sc_clk_tck = sysconf( _SC_CLK_TCK );
	if sysconf() is present (the old check) _and_ _SC_CLK_TCK defined.

	* Config.h.top, Configure.in, h/Need.h: default sysconf() prototype.

	* Configure.in: Rmph.  Discovered that
	   AC_HAVE_LIBRARY(crypt, [LIBS="$LIBS -lcrypt"])
	is NOT equivalent to
	   AC_HAVE_LIBRARY(crypt)
	because the latter also generates the
	   #define HAVE_LIBCRYPT 1
	line correctly, but the former doesn't.  Fixed a
	number of lines in Configure.in to reflect this.
	Since HAVE_LIB* weren't being used yet, these bugs
	weren't affecting users.

Mon Dec 26 19:18:52 1994  Jeff Prothero  <cynbe@muq.org>

	* stg.t: Added stg_Set_Byte(), so I could null out
	the unencrypted password immediately.

	* Hax.t: Dropped a dummy crypt() in just so Muq will
	compile on systems w/o crypt().  Anyone got a good
	portable one that can be legally distributed?

	* job.t: Added 'crypt' prim for pw encryption.

	* Ultrix was still reporting missing prototypes for
	drand48() and srand48():  I neglected to actually
	rebuild 'Configure' after fixing that problem.  Below
	fixed that.

	* Makefile (Config.h.in, Configure): I hadn't rebuilt Configure
	for awhile, and discovered 'autoconf' was finding the non-GNU
	/usr/bin/m4 instead of the /usr/local/bin/m4 again.  Added
	   test -z "${M4}"	   && 	\
	   test -x /usr/local/bin/m4 &&	\
	   M4=/usr/local/bin/m4;	   export M4; \
	so /usr/local/bin/m4 will get used by preference when both
	exist, on the assumption it is likely to be GNU m4.

	* usr.[ht]: Eliminated the 'creations' slot, which was going
	to contain a map of objects created by the user, to avoid
	thrashing the entire db to find them.  But there seem to be
	policy issues as to just what should and shouldn't be kept
	in such a list, which suggests that it doesn't belong in our
	policy-free server code, at least as yet.

Fri Dec 23 00:56:05 1994  Jeff Prothero  <cynbe@muq.org>

	* -1.9.4 release.

	* muq/muf/00-version.t added to check that library and server
	versions match properly.

	* asm.t: compute_arity() was keeping hard program counters
	into the code for speed while doing the symbolic execution
	of the code, but subsequent changes had introduced vm_Loc()
	calls into the execution process, which could move the function
	being interpreted, resulting in garbage bytecodes being read
	and a "bad opcode" coredump when this was detected:  This
	may possibly have been the bug Pakrat encountered, if code
	was being assembled during his telnet connect/disconnect cycles.
	  Fixed by rewriting these functions to eliminate hard pointers.

Wed Dec 21 19:23:34 1994  Jeff Prothero  <cynbe@muq.org>

	* bin/muq-tar: Fixed: c/aclocal.m4 wasn't being included in distributions.

Tue Dec 20 18:53:28 1994  Jeff Prothero  <cynbe@muq.org>

	* Makefile2.in:  Changed to make dependencies directly on .t
	files and discard .c files immediately after use: This reduces
	clutter, the saving of a few meg of disk can matter on small
	systems, and this eliminates the danger of absentmindedly editing
	the .c file instead of the .t file.

Sun Dec 18 23:56:53 1994  Jeff Prothero  <cynbe@muq.org>

	* job.c: Backtrace log from Kim and a peek at the code revealed
	that job_P_Use_Package() had a
	  ob_Guarantee_Stg_Arg(  0 );
	which it shouldn't, and that it had
	  if (!OBJ_IS_OBJ(pkg) && OBJ_IS_CLASS_PKG(pkg)) {
	where
	  if (!OBJ_IS_OBJ(pkg) || !OBJ_IS_CLASS_PKG(pkg)) {
	was needed.

Thu Dec 15 21:17:43 1994  Jeff Prothero  <cynbe@muq.org>

	* -1.9.0 release.

	* muf.texi: warn() written, to provide lineno info on compiler
	error messages.  muf.texi converted to use warn() instead of
	MUQ_WARN() directly.

	* asm.texi: warn() written, to provide filename/lineno info
	on assembler error messages.  asm.texi converted to use
	warn() instead of MUQ_WARN() directly.

Wed Dec 14 18:39:17 1994  Jeff Prothero  <cynbe@muq.org>

	* Converted muq/c/*.c to muq/c/*.texi.

	* Muq-detexify.c created: A (barely) literate programming experiment.

	* fun.c: Added #/local-variable-names support.

	* asm.c: Added #/save-debug-info flag support.

	* job.c: assemble-variable-slot acquired a 'name' parameter.

	* asm.c: asm_Var_Next() got a 'name' parameter.

	* asm.c: Made local_vars a stack of variable names instead of
	an integer count of local variables allocated, to improve
	debug support.

Mon Dec 12 00:34:44 1994  Jeff Prothero  <cynbe@muq.org>

	* Source line counting seems to work on all muf/*.muf files now.

	* muf.c: skip_whitespace():  When reaching physical end-of-string,
	it was returning w/o updating beg/end, resulting in rescanning of
	already scanned text on next call... with consequent duplicate
	bumping of line number.

Sun Dec 11 00:22:22 1994  Jeff Prothero  <cynbe@muq.org>

	* muf.c: (next_token): p.typ wasn't being initialized, which
	value sometimes got returned and stored in db, crashing the
	garbage collector.

	* muf.c: next_token2(), skip_whitespace(), skip_comment():
	Fixed so we always have p->beg <= p->end on exit, and next_token2()
	bumps p->beg to start next token search, not skip_comment().
	This is cleaner... and avoids crashing my debug printf()s or
	counting '\n's twice sometimes :).

	* muf.c: do_semi(), do_colon(), skip_whitespace() &tc:
	Code to track line number in file and function, and also
	keep #/line-number in assembler updated.

	* fun.c: #/line-number and #/file-name properties.

	* asm.c:asm_Cfn_Build():  Create and save line-numbers vector
	in result function.

	* asm.c: Added 'linecodes' stack parallel to 'bytecodes' stack,
	to track line number info for each bytecode.

	* fun.c: Ye gods, someone already added #/line-numbers prop :).

	* asm.c: Added #/line-number prop: [set]_line_number() fns.

Sat Dec 10 01:50:48 1994  Jeff Prothero  <cynbe@muq.org>

	* mrk.c: Marker class created, for use with textbuffers.

	* tbf.c: Text-buffer class created.

	* job.c: Kim pointed out "/u/Root user?" was returning nil:
	Changed job_P_User_P line
    *jS.s = OBJ_FROM_BOOL( OBJ_IS_OBJ(*jS.s) && OBJ_IS_CLASS_USR(*jS.s) );
	to
    *jS.s = OBJ_FROM_BOOL( OBJ_IS_OBJ(*jS.s) && OBJ_ISA_USR(*jS.s) );

Thu Dec  8 18:16:10 1994  Jeff Prothero  <cynbe@muq.org>

	* muf.c: do_semi() was erroneously restoring original string
	along with rest of context, resulting in text after a ';'
	often getting ignored.  (Thanks to Kim for noticing!)

	* -1.8.0 release.

	* Created CALL_METHOD, implemented as job_P_Call_Method, and
	rewrote asm_Build_Generic() to use it.

Wed Dec  7 23:05:32 1994  Jeff Prothero  <cynbe@muq.org>

	* Hacked obj_X_Set() to reject any method sets but a keyword key
	with a compiled-function value with arity matching the
	corresponding generic function, and to create a corresponding
	generic function if none exists.

	* Wrote asm_Build_Generic().

Tue Dec  6 19:04:26 1994  Jeff Prothero  <cynbe@muq.org>

	* muf.c: |get |ged and |set functions.

Mon Dec  5 19:35:32 1994  Jeff Prothero  <cynbe@muq.org>

	* job.c: Changed 'root-listen-for-sockets' to
	']root-listen-for-sockets', and switched args from positional
	strings to keyword-labelled keywords.  Ditto 'root-open-socket',
	'root-close-socket'.

Sat Dec  3 14:32:44 1994  Jeff Prothero  <cynbe@muq.org>

	* -1.7.0 release.

	* skt.c: Buffers are now removed from skt_buffer_lst in
	buf_physically_close_one_socket(), not
	buf_physically_close_all_marked_sockets().  (As Kim
	suggested, the root-close-socket -> skt_Close() ->
	buf_physically_close_one_socket() cascade was failing
	to delete the freed buffer from sk_buffer_lst, resulting
	in a nice coredump on the next select() attempt.)

	* muf.c: Added 'unpush' and 'unpull'.

	* jobbuild.c: Added UNPUSH and UNPULL.

	* stm.c: Added stm_Unpush() and stm_Unpull().

	* stm.c:stm_Push():  Expand vector when full and < STM_SIZE_MAX.

Fri Dec  2 19:03:19 1994  Jeff Prothero  <cynbe@muq.org>

	* Muq selftests cleanly again.

	* (Fixed zillions of little things in job.c and obj.c broken by
	the changed stackblock conventions.)

	* vm.c: dbDuplicate():  Added "*****" to start of error message,
	so the selftest script will notice it.

Thu Dec  1 20:19:40 1994  Jeff Prothero  <cynbe@muq.org>

	* job.c: Converted from old stackblock format (integer
        on top of args) to the  new stackblock format (blocktop
	on top of args on top of [ marker).  This affects all job.c
	prims manipulating blocks;  I forbear listing them all.

Tue Nov 29 17:42:27 1994  Jeff Prothero  <cynbe@muq.org>

	* blk.c: Created, for top-of-block markers.

Mon Nov 28 21:01:27 1994  Jeff Prothero  <cynbe@muq.org>

	* muf.c: Backslash fixes in is_number(),is_string(),end_of_prefix(),
	end_of_package_name(), find_package_symbol2(), look_up_prefix().
	You can now do "12 --> a\ b", cybergods help us...

	* muf.c: Fixed process_string() to work on undelimited strings too.

	* muf.c: Kim Liu posted a patch to improve // handling;  His
	line numbers appear to differ from mine, but I added similar
	code (last='\0'; ... last = (last=='\\' ? '\0' : c);) to
	scan_string(),scan_char(),scan_number(),scan_id(),scan_sharp().
	Appropriate backslashing now allows things like identifiers
	which contain whitespace in their names, or look like numbers,
	as well as the stuff like '\\' and "\"" that Kim wanted.
	(: Hope I don't wind up regretting the former! :)

Wed Nov 23 15:45:40 1994  Jeff Prothero  <cynbe@muq.org>

	* -1.6.0 release.

	* job.c: Patched job_P_Reset() ('reset') to reset locks.
	* job.c: Patched throw() to handle LOCK stackframes.
	* job.c: Patched throw_set_up_jSl_and_jSv() to handle LOCK stackframes.
	* job.c: Patched job_P_Return() to understand LOCK stackframes.

	* lok.c: Implemented lok_Release().
	* lok.c: Implemented lok_Maybe_SendSleep_Job().

	* job.c: Implemented job_P_[Push|Pop]_Lockframe().

	* muf.c: Implemented with-lock{...} syntax.

Tue Nov 22 06:31:01 1994  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.c: 'push-lockframe', 'pop-lockframe' operators.

	* muf.c: 'make-lock'.

Mon Nov 21 08:28:01 1994  Jeff Prothero  <cynbe@muq.org>

	* Makefile2.in: Move h/Version.h dependency from obj.o to muq.o,
	matching below change.

	* obj.c: Removed /etc/version, unneeded since the introduction
	of /muq/#/version.

	* -1.5.0 release.

	* z-muq.c: Changed read_eval_print_loop() to reflect
	changeover from string to keyword hardwired properties.

	* sym.c: Rehacked sym_for_next() &kith, same reason.  Also,
	sym_for_next() was still exporting props in PUBLIC
	area, moved that to SYSTEM area to match general convention.

	* obj.c: Rehacked obj_X_Next, same reason.

	* cfn.c: Totally rewrote cfn_for_nxt() & kith to support
	special props as keywords rather than strings.

	* z-muq.c:assemble_zil(): Changed to hand-assemble
	"@/#/package/#/name" using keywords instead of strings
	for "package" and "name".

	* obj.c: Changed obj_X_Get() to check for special props
	using int compares on p->keyword field instead of obj_StrNeql()
	compares on p->name field.  Also obj_X_Del(), obj_X_Set().
	Changed obj_X_Get_Asciz() to ignore special props completely,
	since they are now always keywords.

	* Whee, runs again after below :).

	* job.c: Changed job_path_get_rooted() to treat pathname
	components as keywords instead of strings.

	* *.c: Changed all hardwired property references from
	strings to keywords.

Sun Nov 20 06:14:57 1994  Jeff Prothero  <cynbe@muq.org>

	* obj.c: Added find_all_system_property_keywords() to
	initialize below keyword entry in each special prop.

	* obj.h: Added a keyword entry to struct Obj_Special_Property_Rec.

	* muf.c: Changed /x/y/z type keys to be keywords, not strings.

	* muf.c: Implemented o<"a"> syntax for string keys.

	* muf.c: Implemented "#'fn" shorthand syntax for
	"'symbol symbol-function", somewhat in CommonLisp style.

	* muf.c: Added 'delete: <path>' syntax for deleting keyvals
	from objects.

	* muf.c: Moved the 'ignore_functions' flag in the compile_path
	function complex into the 'mode' bitbag, renaming it MODE_SUBEX.

	* muf.c: Generalized the 'loading' flag in the compile_path
	function complex to a bitbag of MODE_* values.  Merged the
	'quoted' parameter in as MODE_QUOTE and the 'constant'
	parameter in as MODE_CONST.

Sat Nov 19 14:41:25 1994  Jeff Prothero  <cynbe@muq.org>

	* muf.c: Added scan_sharp() to implement special handling
	for tokens starting with '#', following CommonLisp -- in
	particular, for "#'symbol" synonym to "'symbol symbol-function".

Sat Nov 19 04:18:28 1994  Jeff Prothero  <cynbe@muq.org>

	* chr.c: chr_sprintX() was ignoring 'qot' parameter.

	* jobbuild.c: Added "to-delimited-string" function.

	* jobbuild.c: Added "to-string" function.

Fri Nov 18 09:31:00 1994  Jeff Prothero  <cynbe@muq.org>

	* muf.c: Renamed 'null' to 'null?', which seems to read better in MUF.

	* muf.c: Rewrote barfor() (i.e., re-implemented |for i do{...})
	to use set-bth/dup-bth instead of set-nth/dup-nth, thus allowing
	a |for loop to accumulate junk on top of the block in question.

Thu Nov 17 06:42:53 1994  Jeff Prothero  <cynbe@muq.org>

	* job*.c: Added set-bth and dup-bth, indexing relative to
	bottom of stack rather than top.

	* job.c: Changed set-nth and dup-nth from fast to slow ops.

	* jobbuild.c: Added 'eq' operator per CommonLisp.

Wed Nov 16 07:19:47 1994  Jeff Prothero  <cynbe@muq.org>

	* muf.c: Added 'null' as a 'not' synonym, per CommonLisp.

	* job.c: Added 'end?' operator to match CommonLisp's 'endp'.

	* asm.c: compute_basic_block_arity() was implementing
	symbolic evaluation of '|' and ']', but this needed to be
	in compute_arity_effects() in order to handle non-primitive
	functions of those types (CALLI case in compute_basic_block_arity()).

	* muf.c: Implemented '<list> listfor val [cons] do{...}' loop.

	* asm.c: compute_basic_block_arity() hack for call{...}
	was not symbolically popping called fn off stack.

Sun Nov 13 03:39:56 1994  Jeff Prothero  <cynbe@muq.org>

	* jobbuild.c: PRINT_TIME arity was set to A(0,0,0,2,1) when
	A(0,0,2,1,0) was needed.

	* asm.c: compute_basic_block_arity()/FUN_ARITY_TYP_CALLI
	was returning   Vm_Unt tp   when   Vm_Obj arity   was needed
	(i.e., an arity component instead of a full arity).  Stronger
	typechecking that distinguished Vm_Unt from Vm_Obj would have
	caught this, as would having been awake.

Sat Nov 12 01:48:15 1994  Jeff Prothero  <cynbe@muq.org>

	* vm.c: Added vm_Bytes_Allocated_Since_Last_Garbage_Collection
	to set of variables saved in index file, to fix Pakrat-noted
	problem of indefinite db bloat during repeated runs each too
	short to trigger garbage collection.

	* Went through and systematically changed "tinyMuq" to "Muq"
	everywhere.  Partly for folks who want Muq to stop sounding
	like a game, mostly because with the abandonment of Fuzzball
	emulation as a design goal, Muq no longer really has any
	direct connection to the tinyMu* family, making the name
	more deceptive than informative.

Thu Nov 10 20:15:15 1994  Jeff Prothero  <cynbe@muq.org>

	* Makefile: Cessna reported the -$(MAKEFLAGS) in Makefile creates
	problems on Sun4 due to being undefined and expanding into a '-'
	which the subMake chokes on.  I copied it from some example long
	ago, and it serves no current purpose:  Eliminated it.

Tue Nov  8 20:05:17 1994  Jeff Prothero  <cynbe@muq.org>

	* job.c,muf.c: Renamed 'root-gc' to 'root-collect-garbage'.
	(I'd called it 'gc' because xlisp does, but it really isn't
	something likely to be used nearly often enough to justify
	such a short cryptic name.)

	* Added 'find-[next|previous]-substring[-ci]?' functions,
	to allow searching forward or backward from arbitrary
	points in a string.

	* Fixed 'car' and 'cdr' to return NIL when given NIL,
	per CommonLisp spec.

Mon Nov  7 21:15:18 1994  Jeff Prothero  <cynbe@muq.org>

	* call{...} syntax debugged:  You can now do
	      2 2 :: + ; : y call{ $ $ -> $ } ; y
	instead of the mundane
	      2 2 +
	and impress all your friends!

Sun Nov  6 21:58:35 1994  Jeff Prothero  <cynbe@muq.org>

	* asm.c: Hacked compute_basic_block_arity() to understand
	FUN_ARITY_TYP_CALLA.

	* fun.c: Added FUN_ARITY_TYP_CALLA and fun_Type[] entry for it.

	* muf.c: Wrote do_calla() to implement call{...} syntax.

	* job.c: Wrote job_P_Assemble_Calla() to implement below.

	* jobbuild.c: Added JOB_OP_ASSEMBLE_CALLA to give muf access
	to asm_Calla().

	* asm.c: Wrote asm_Calla() to give access to below.

	* job.c: Wrote job_Calla() to implement below.

	* jobbuild.c: Added JOB_OP_CALLA to implement runtime checking of
	function arity as we call a runtime-bound function.

	* Renamed |drop to |delete, to be more consistent with
	CommonLisp nomenclature.

Sat Nov  5 00:50:35 1994  Jeff Prothero  <cynbe@muq.org>

	* Added 'first'/'rest' synonyms for 'car'/'cdr'.

	* Added 'rplaca' and 'rplacd' functions, from Lisp.

	* jobbuild.c Moved BAD and ROT from fast to slow table, to
	free up fast opcodes.

	* Fixed: muf.c:do_for_arg() had
	    case MUF_TYPE_STR:
	where
	    case MUF_TYPE_ID:
	was needed, resulting in
	    : pop-all   depth -> limit   for i from 1 upto limit do{ pop } ;
	giving
	    **** Sorry: unsupported constant type

	* Eliminated the old 'log.c' (logic variables) file.
	(Turns out prolog merges logic variables by setting pointers
	in them, so they need to be heap-allocated, not immediate.)

	* Assigned tagbits for double, bignum, bitvec, shortvec, intvec,
	floatvec, doublevec and rationalized the result, producing:
	  Bit:
	  ...76543210   Meaning
	  -----------   ---------------------------------------------
	  ...*******0   31-bit int   in upper 31 bits.
	  ...***11111   28-bit float in upper 28 bits.
	  ...***11101   Double.
	  ...***11011   Bignum.
	  ...***11001   Thunk/promise.
	  ...***10111   Procedure.
	  ...***10101   Standard obj stored in vm_obj.
	  ...***10011   CONS cell.
	  ...***10001   Symbol.
	  ...***01111   Vector.
	  ...***01101   Bitvector.
	  ...***01011   Bytevector. (String.)
	  ...***01001   Shortvector.
	  ...***00111   Intvector.
	  ...***00101   Floatvector.
	  ...***00011   Doublevector.
	  ...11100001   A 0-byte byte seq.
	  ...11000001   A 1-byte byte seq (o >> 24)
	  ...10100001   A 2-byte byte seq (o >> 24), (o >> 16)
	  ...10000001   A 3-byte byte seq (o >> 24), (o >> 16), (o >> 8)
	  ...01100001   Bottom-of-stack value.
	  ...01000001   Special symbols such as OBJ_NOT_FOUND.
	  ...00100001   Reserved.
	  ...00000001   Reserved.

	* Added muq/pub directory and A-READ.ME.

Fri Nov  4 03:23:21 1994  Jeff Prothero  <cynbe@muq.org>

	* Coded up job_P_Find_Method[_P]().

	* Split   obj_X_Get_With_Inheritance() from obj_X_Get()
	and obj_X_Get_Asciz_With_Inheritance() from obj_X_Get_Asciz().

Thu Nov  3 17:38:13 1994  Jeff Prothero  <cynbe@muq.org>

	* Added new 'find-method' and 'find-method?' prims.

	* Removed the old (unimplemented) 'send-message' primitive.

	* Added cfn #/as-root? key.

	* Added cfn #/generic? key.

	* Similar changes in muf.c.

	* Similar changes in asm.c.

	* Split CFN_INLINE flag into CFN_PLEASE_INLINE and CFN_NEVER_INLINE
	to support CommonLisp semantics on this front, and correspondingly
	split cfn #/inline? key into #/never-inline? and #/please-inline?,
	and matching MUF keyword from inline into [never|please]-inline.

	* Changed cfn.h from using a bitflag for each compiled
	function type, to using a 5-bit typefield.  (We were up
	to seven type flags and growing.)

	* Fixed: cfn.h had 
            #define CFN_SET_CONSTS(o,i) (((o)& CFN_CONSTS_MASK) | ...
	where
            #define CFN_SET_CONSTS(o,i) (((o)&~CFN_CONSTS_MASK) | ...
	was needed.
	Discovered by inspection: Was never tested on nonzero 'o'.

	* Looked at corbit (CommonORBIT) and was disappointed:  It
	is not a very good match for Muq.  In particular, pointers
	from proxy to client prevent natural garbage collection of
	clients, and also clash unpleasantly with Muq protection
	when proxy and client are owned by different players. I'll
	go ahead and roll my own as intended.

Sun Oct 30 01:10:47 1994  Jeff Prothero  <cynbe@muq.org>

	* Fixed: end-job was calling throw() which was assuming that
	a valid block must be on the stack.  This bug hadn't been
	obvious due to the end-job arg always being zero before, which
	looked like the null block throw() was expecting.

Sat Oct 29 22:33:42 1994  Jeff Prothero  <cynbe@muq.org>

	* Coded up root-close-socket.

	* Changed end-job to require a NIL argument, instead of just
	ignoring its argument, on the theory that this will make later
	introduction of realistic values for the argument easier.

	* Added socket? prim.

Fri Oct 28 00:25:24 1994  Jeff Prothero  <cynbe@muq.org>

	* Reversed order of arguments to root-listen-for-sockets,
	which will probably make more sense in lisp.

	* Added 'root-open-socket'
	and    'root-close-socket' functions.

	* Renamed 'listen-on-port' to 'root-listen-for-sockets'.

Thu Oct 27 00:28:06 1994  Jeff Prothero  <cynbe@muq.org>

	* -1.4.0 release.

	* Added ]replace-substrings.  Maybe that will be enough
	to keep the string-hackers happy for awhile? :)

	* Added wrap-string, another Andy suggestion.

	* Added |dup |dup-nth |pop-nth |push-nth |set-nth ops,
	suggestions from Andy.

	* Renamed 'put-nth' to 'set-nth' to be more consistent with
	other Muq nomenclature.

Wed Oct 26 14:41:11 1994  Jeff Prothero  <cynbe@muq.org>

	* Redefined |rotate to take an integer arg and
	rotate block by that many slots.

	* Added MUF 'gcd' and 'lcm' operators.

	* Renamed MUF 'gc' to 'root-gc', since it shouldn't really be
	free to be invoked by random users on a production system, and
	since I'm beginning to suspect that it may wind up being
	permanent, since it gives a solid snapshop of db space usage,
	which nothing else does or will.

Tue Oct 25 18:46:07 1994  Jeff Prothero  <cynbe@muq.org>

	* -1.3.0 release.

Sun Oct 23 21:21:22 1994  Jeff Prothero  <cynbe@muq.org>

	* Added mufprog2.texi docs on arity declarations.

	* Rehacked to allow '!' forcing of >any< arity declaration.

	* Changed '{ . -> . }' arity syntax to '{ $ -> $ }' because
	to my eye, the '.' were visually overwhelmed by the surrounding
	syntax:  The '$'s seem to hold their own nicely, and Americans
	can take '$' to be 's' for 'scalar argument'.

	* Fixed: muf.c:do_brace()/SWITCH was failing to deposit
	final label if the 'else:' was missing (meaning do_case_else()
	hadn't handled the task):  case{...} should now work correctly
	without an 'else:'.

Sun Oct 23 00:13:32 1994  Jeff Prothero  <cynbe@muq.org>

	* Hacked asm.c:compute_arity() to uncomplainingly allow
	CALL bytecodes (only) in functions declared { -> ? }.
	(00-Core-muf.muf:compile-} is a good example of a fn
	which truly needs this type.  Alas!  So we basically
	turn off arity checking in such functions.)

	* Hacked asm.c:compute_arity() to treat infinite loops
	as a FUN_ARITY_TYP_EXIT (function that never returns)
	rather than an error.

	* Switched arity encoding from 2 to 4 bits of type info,
	reducing max blocks accepted/returned from 127 to 63 to
	get enough bits.  Added explicit types for CALLI, CALL,
	START_BLOCK, END_BLOCK.

	* Remembered that manyfolk seem to consider "default:" an
	obscure computer jargon word:  Changed "default:" to "else:"
	in the "case{" construct.  (I like the brevity anyhow.)

	* Rehacked muf.c to make "{" less of a special case:
	Eliminated MUF_TYPE_BRC, returned "{" as a regular identifier,
	and replaced scan_braces()/brc_compile() with a more conventional
	do_brace().

Fri Oct 21 21:23:46 1994  Jeff Prothero  <cynbe@muq.org>

	* Added a char->string operator, an Andy suggestion.

	* Wrote pkg_Knows_Symbol() and hacked sym.c:sym_sprintX()
	to use it to avoid printing package qualifiers except
	when absolutely necessary.  'nil' now prints out looking
	exactly as it did before it became a symbol... and people
	wonder what I spend my time on. :)
	
	* Hacked sym.c:sym_sprintX() to not print leading ' when
	formatting constant symbols.

	* Hacked obj.c:validate_muf_constant() to make t and nil
	constants.

	* Hacked sym_Alloc_Asciz_Keyword() to make all keywords
	constants.

	* Hacked muf.c:is_user_global_check() to load constant
	values directly at runtime, bypassing usual indirection
	through symbol.

	* Added /muq/#/version string ("-1.3.0" or such) so libraries
	can complain if server version is too outdated for them.

	* Hacked muf.c to support '-->constant' and 'constant?' ops.
	Hacked muf.c:do_semi to respect 'constant' flag.

	* jobbuild.c: Added SET_SYMBOL_CONSTANT and CONSTANT_P.
	Hacked SYMBOL_FUNCTION to hide fact we use zero in fn slot
	to mark a symbol as constant.
	Hacked SET_SYMBOL_FUNCTION, SET_SYMBOL_VALUE and
	SET_SYMBOL_PLIST to refuse to operate on constants.

	* jobbuild.c: Fixed: SET_SYMBOL_PLIST arity was wrong.

Fri Oct 21 15:22:55 1994  Jeff Prothero  <cynbe@muq.org>

	* Changed |for so indices run 0->n-1 as values run
	bottom to top of stackblock, which is more intuitive
	to novices than the previous top-to-bottom order, I
	think.  (This requires an additional conditional
	branch in the body of the loop, but the price seems
	justified.)

Thu Oct 20 00:08:07 1994  Jeff Prothero  <cynbe@muq.org>

	* Hacked muf.c:look_up_prefix() to support #:x
	syntax, creating do_package_symbol() in the
	process.

	* Created sym_Alloc_Asciz_Keyword() and hacked
	muf.c:find_package_symbol() to support :x syntax.

	* Hacked sym.c:sym_sprintX() to print out keywords
	correctly (as ":sym" not "keyword:sym").

	* Added creation of keyword package to obj_Startup().

	* Fixed: jobbuild.c:BEQ and BNE were compiling separate
	"rio" cases, a relic from the days when MUCK compatability
	meant treating both "" and 0 as FALSE.  Since NIL is now
	the one and only FALSE value, a single function can now
	handle all argument types indifferently.  Maybe without
	crashing, unlike the previous :)

	* Nuked '!' operator as a synonym for 'not'.  Given
	that we're not using '&' and '|' for 'and' and 'or',
	it seems out of place to use '!' for 'not'... and I
	have a feeling I'll be wanting to use it for
	'factorial' one of these days.

	* Nuked type Boolean and 'boolean?' operator.

Wed Oct 19 22:48:08 1994  Jeff Prothero  <cynbe@muq.org>

	* Mostly converted the C code from using folding.el to
	using outline-minor-mode, which is standard in emacs19.

Wed Oct 19 01:50:51 1994  Jeff Prothero  (cynbe@muq.org)

	* -1.2.0 release <wrygrin>.

	* Added chop-string[ operator for Andy. :)
	Also |drop operator.   Also ]glue-strings operator.

	* -1.1.0 release.

	* Fixed:job.c:job_P_Float_P() had
            *jS.s = OBJ_IS_BOOL( OBJ_IS_FLOAT(*jS.s) );
	where 
            *jS.s = OBJ_FROM_BOOL( OBJ_IS_FLOAT(*jS.s) );
	was needed.  A simple case of highway hypnosis
	at the keyboard.  job_P_Number_P() had exactly
	the same bug 12 lines below.  I don't see any
	other instances of it in job.c.  Kudos to Kim
	for spotting this one. :)

Sun Oct 16 14:26:44 1994  Jeff Prothero  (cynbe@muq.org)

	* Changed "for-each" to "foreach" everywhere,
	because the syntax I really want is
	   for-each key in /lib/muf do{ ... }
	but I'm too lazy to implement that right now,
	so this keeps that syntax free for future use.

	* Changed "for" syntax from old Forthish
	   1 10 for i do{ ... }
	to CommonLispish
	   for i from 1 upto   9 by 1 do{ ... }
	   for i from 1 below  9 by 1 do{ ... }
	   for i from 9 downto 1 by 1 do{ ... }
	   for i from 9 above  1 by 1 do{ ... }
	formats.

	* Nuked "if{", an old synonym for "if".  Also "}else{".

	* Renamed "directory?" to "vanilla?".  At the least,
	this frees up "directory?" for more appropriate use
	one of these days, and "vanilla?" is less likely to
	be missed.

	* Nuked "after" and "always-do" in favor of always
	using "after{" and "}always-do{".

	* Changed "clone" to "copy" everywhere.  I like
	"clone" better, if only because it saves a syllable,
	but "copy" is clearly the standard CommonLisp verb
	in this case.

	* Renamed 'text' to 'string' everywhere.  This is
	about my sixth flipflop on this particular bit of
	nomenclature, and I hope my last!

	* Nuked the path-get path-get? and path-set functions,
	which are largely redundant now that normal paths
	are evaluated at runtime instead of compiletime.

	* Eliminated clone-net-io-stream, an idea that
	didn't work out.

	* Renamed read-stream to read-stream-line.

	* Renamed read-input-stream to read-line.

	* Renamed read-input-stream to read-line.

	* Eliminated "}until" syntax and changed "until"
	operator from its old Forthish meaning of a
	bottom-of-loop test to a CommonLispish middle-of-loop
	test: Old "}until" is equivalent to new "until }".

	* Eliminated old "repeat" and "}repeat" synonyms
	for "}".

	* Renamed 'break' to 'loop-finish' to match
	CommonLisp loop facility usage.

	* Dropped Forth-influenced "loop" (i.e., loop
	start with no curly brace on operator) as not
	fitting with the evolving spirit of the loop
	constructs.

	* Renamed 'loop{' to 'do{' to improve internal
	consistency and CommonLisp compatability.

	* Renamed 'switch{' to 'case{' to better match
	CommonLisp usage.

	* Changed proposed promise syntax from '+:' to '1:'.

	* Switched print fns from "<vec>" to "#<vec>" style
	of display, to fit CommonLisp conventions better.

	* Renamed jst.c to jbs.c.

	* Renamed all ci-* functions to *-ci, for consistency
	with the <=-ci and such operators (which were renamed
	because ci-< looked like a<x> path notation to the
	lexer).

	* Renamed "I/O queue" (and ioq) to "socket" (and skt)
	everywhere, since ioqs had evolved into something
	really not a stream/queue at all -- the msq/mss
	provide that part of the functionality.  (That is,
	one would never directly do stream operations on an
	ioq, so calling it a queue/stream is misleading.)

	* Renamed "queue" to "stream" everywhere, excepting
	job queues.  And qqq.[ch] to stm.[ch].

	* Renamed PIPE to STREAM everywhere except in SIGPIPE,
	where I'm retaining exact Unix nomenclature for now.

	* Renamed msq (message-queue) to mss (message-stream),
	as part of general shift to CommonLispish nomenclature.

Sat Oct 15 21:19:33 1994  Jeff Prothero  (cynbe@muq.org)

	* Added /muq/#/max-db-copies-to-keep property for
	reading and writing vm_Max_Db_Copies_To_Keep value.

	* Fixed: sys.c and muq.c were still exporting their
	special hardwired props as public;  (I've now come
	down pretty hard on the side of making all such props
	system props.)

	* Split Class Muq (muq.c) off from Class System (sys.c).

	* Renamed muq.c to lib.c

	* Changed the constant vm.c:VM_MAX_DB_COPIES to the
	variable vm.c:vm_Max_Db_Copies_To_Keep, saved and
	restored as part of the vm.c index file header.

	* Fixed: fun.c wasn't exporting an "arity" property.

	* Fixed: cfn_for_nxt() was missing a "source" entry.

	* Fixed: cfn.c was still exporting its props as
	public, not system.

Sat Oct 15 13:20:02 1994  Jeff Prothero  (cynbe@muq.org)

	* "Everywhere, and everywhen, knowing when
	   to rub blue mud in your bellybutton  is
	   an essential survival skill." --RAHeinlein
	I'm not overly happy letting businesspomposity
	and superstition kill off whimsy, but due to a
	number of complaints that "player" doesn't sound
	official enough and such:
	-> Changed "player" to "user" throughout.
	-> Changed "god" to "root" throughout, praying
	   no pagans object.  Exception, didn't change
	   "The goddess is alive" to "The roottess is alive",
	   it sounded odd, nor
           "Marcus is the God of MU* servers." to
           "Marcus is the Root of MU* servers.", same problem.
	-> Renamed 'wizard' props to 'admins' props.
	-> Renamed:
           wiz-kill-job  to root-kill-job
           wiz-make-user to root-make-user
           wiz-make-user to root-make-user
           wiz-shutdown  to root-shutdown
	We'll see how long 'kitchen-sinks' can survive...

	* Eliminated as obsolete/baddesign:
	  god-set-user-to-wizard
	  god-set-wizard-to-user
	  wizard?
	  puppet?
	  make-puppet
	  wiz-listen
	  wizard and puppet classes

Fri Oct 14 23:02:50 1994  Jeff Prothero  (cynbe@muq.org)

	* -1.0.2 release.

	* Fixed: muf.c:muf_Reset() wasn't resetting SYMBOLS, a relic
	from the pre-package, pre-symbol days, when this was a way of
	keeping function definitions around for a session.  This was
	resulting in bad local symbol entries being left after
	aborted compiles, which would then puzzle the arity-deduction
	logic on later compiles.

Fri Oct 14 20:47:39 1994  Jeff Prothero  (cynbe@muq.org)

	* Fixed: fun.c:for_new() wasn't initializing 'arity' slot.

Fri Oct 14 00:14:20 1994  Jeff Prothero  (cynbe@muq.org)

	* -1.0.1 release.

	* Changed ":*" to "*:" everywhere in muf/Check/x-jump.muf
	to match similar change in muf.c.  (CommonLisp regards
	:* as a keyword, but explicitly reserves words ending in
	':' to the implementation, so this seems a better setup.)

	* In muf.c:look_up_prefix(), changed
	"No such variable" error to "Undefined identifier",
	since we don't actually know if it was intended to
	be a variable or function, and it was confusing folk.

	* Fixed: job_Got_Headroom() had
	    jS.s_0   = &v->slot[       1 ];
	where
	    jS.s_0   = &v->slot[       0 ];
	was needed, resulting in loss of one stack
	value on each stack expansion, essentially.
	(Thanks to Artie for reporting that one.)

Wed Oct 12 15:02:45 1994  Jeff Prothero  (cynbe@muq.org)

	* Added prototypes for random(), srand48(), drand48(),
	after Wyatt reported them coming up missing on SunOS 4.1.3

Wed Oct 12 01:26:12 1994  Jeff Prothero  (cynbe@muq.org)

	* -1.0.0 release.

