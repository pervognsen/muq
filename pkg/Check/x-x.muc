
#if (.cfg.haveOpenGL)


float* light_diffuse  = (float*) { 1.0, 1.0, 1.0, 1.0 };
float* light_position = (float*) { 1.0, 1.0, 1.0, 0.0 }; 



// -------------------------- Changing color on a cube ----------------------------

void coloredCube( void ) {
    glutInitDisplayMode( GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH );
    glutCreateWindow("Changing Color");

    glLightfv( GL_LIGHT0, GL_DIFFUSE, light_diffuse );
    glLightfv( GL_LIGHT0, GL_POSITION, light_position );
    glEnable( GL_LIGHTING );
    glEnable( GL_LIGHT0 );
    glEnable( GL_DEPTH_TEST );
    glMatrixMode( GL_PROJECTION );
    gluPerspective( 40.0, 1.0, 1.0, 10.0 );
    glMatrixMode( GL_MODELVIEW );
    glutSwapBuffers();

    gluLookAt( /*eye:*/ 0.0,0.0,3.0, /*centre:*/ 0.0,0.0,0.0, /*up:*/ 0.0,1.0,0.0);

    float* cubeColor = (float*) { 1.0, 0.0, 0.0, 1.0 };

    float degrees;
    for (degrees = 0.0;  degrees < 360.0;  degrees += 1.0) {
	glPushMatrix();

	float increasing = degrees / 360.0;
	float decreasing = 1.0 - increasing;
	glTranslatef( 0.0,0.0, -2.0 );
	glRotated( degrees, 0.0, 1.0, 0.0 );
	glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );

	cubeColor[0] = increasing;
	cubeColor[1] = decreasing;
	cubeColor[2] = 0.5;
	glMaterialfv( GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE, cubeColor );

	glutSolidCube( 1.0 );
	glutSwapBuffers();
	glFlush();

	glPopMatrix();

	while (gluqEventsPending()) {
	    obj opcode;
	    obj window;
	    obj button;
	    obj state;
	    obj x;
	    obj y;
	    opcode, window, button, state, x, y = gluqEvent();
/*	    printf("glutEvent returned %s %s %s %s %s %s\n",opcode,window,button,state,x,y); */
	}
    }				

    glutDestroyWindow( glutGetWindow() );
}

shouldWork({	coloredCube();		});





#endif

